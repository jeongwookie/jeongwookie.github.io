<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeongwook&#39;s Blog</title>
  
  <subtitle>Make stuff people want</subtitle>
  <link href="/newblogtest/atom.xml" rel="self"/>
  
  <link href="https://jeongwookie.github.io/newblogtest/"/>
  <updated>2019-03-24T11:13:46.356Z</updated>
  <id>https://jeongwookie.github.io/newblogtest/</id>
  
  <author>
    <name>Jeongwook, Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>네이버 검색 api, 데이터 추출하기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/03/20/190320-collect-data-using-naver-search-api/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/03/20/190320-collect-data-using-naver-search-api/</id>
    <published>2019-03-20T02:17:11.000Z</published>
    <updated>2019-03-24T11:13:46.356Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스트는 네이버 개발자 센터에서 제공하는 검색 api를 통해 우리가 원하는 키워드를 검색하고, 그 결과를 json파일로 저장하는 것을 다루어보겠다.</p><p>json파일로 저장하는 이유는 <code>pandas</code>와 같은 데이터 분석 툴을 사용할 때, import하기 좋은 파일 형식이기 때문이다.</p><p>아래와 같은 순서로 진행한다.</p><ul><li>Step 1: 네이버 개발자센터 등록 및 키 값 받아오기</li><li>Step 2: api caller 만들기</li><li>Step 3: 데이터 수집 후 json 파일로 저장하기</li><li>Step 4: pandas 사용하여 분석하기</li></ul><a id="more"></a><h4 id="네이버-개발자센터-등록하기"><a href="#네이버-개발자센터-등록하기" class="headerlink" title="네이버 개발자센터 등록하기"></a>네이버 개발자센터 등록하기</h4><p>먼저 <a href="https://developers.naver.com/main/" target="_blank" rel="noopener">네이버 개발자 센터</a>에 접속하여 Application -&gt; 애플리케이션 등록 을 클릭한다.</p><p>아래와 같은 화면이 뜨는데, 검색 api 누르고 안드로이드 설정에서 적당한 이름을 넣으면 된다. (com.블라블라)</p><p><img src="https://user-images.githubusercontent.com/25416425/54655089-e75b0d80-4b03-11e9-80cd-fdb8a1c8e654.png" width="550"></p><p>완료하게 되면, 애플리케이션 정보에 client ID와 client secret 코드가 보이는데 이걸 어딘가 안전한 곳에 복사해둔다. (노출 절대 금지)</p><h4 id="api-caller-만들기"><a href="#api-caller-만들기" class="headerlink" title="api caller 만들기"></a>api caller 만들기</h4><p>이제, 네이버 검색 api를 불러올 caller 을 만들어 보자.</p><p>아까 전 네이버 개발자 센터 홈페이지에서 Documents -&gt; 서비스 API -&gt; 검색을 누르면 아래와 같은 페이지가 뜬다. 코드는 python으로 클릭.</p><p><img src="https://user-images.githubusercontent.com/25416425/54655436-43726180-4b05-11e9-8385-1dc66ae2e745.png" width="550"></p><p>여기 있는 코드를 긁어서 오면 아래와 같다. 중간에 <code>YOUR_CLIENT_ID</code>와 <code>YOUR_CLIENT_SECRET</code>에는 아까 복사해 두었던 키값들을 기입한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 네이버 검색 API예제는 블로그를 비롯 전문자료까지 호출방법이 동일하므로 blog검색만 대표로 예제를 올렸습니다.</span></span><br><span class="line"><span class="comment"># 네이버 검색 Open API 예제 - 블로그 검색</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">client_id = “YOUR_CLIENT_ID”</span><br><span class="line">client_secret = “YOUR_CLIENT_SECRET”</span><br><span class="line">encText = urllib.parse.quote(“검색할 단어”)</span><br><span class="line">url = “https://openapi.naver.com/v1/search/blog?query=" + encText # json 결과</span><br><span class="line"><span class="comment"># url = ”https://openapi.naver.com/v1/search/blog.xml?query=" + encText # xml 결과</span></span><br><span class="line">request = urllib.request.Request(url)</span><br><span class="line">request.add_header(“X-Naver-Client-Id”,client_id)</span><br><span class="line">request.add_header(“X-Naver-Client-Secret”,client_secret)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">rescode = response.getcode()</span><br><span class="line"><span class="keyword">if</span>(rescode==<span class="number">200</span>):</span><br><span class="line">    response_body = response.read()</span><br><span class="line">    print(response_body.decode(‘utf<span class="number">-8</span>’))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(“Error Code:” + rescode)</span><br></pre></td></tr></table></figure><p>샘플 코드의 주석에 적힌 대로, 현재 이 코드는 키워드를 받아서 블로그를 검색한 결과를 보여준다.</p><p>코드가 너무 기니까 조금 간략하게 바꾸어 보자. 대충 이런 식이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"> </span><br><span class="line">keyword = “”</span><br><span class="line">url = “https://openapi.naver.com/v1/search/blog?query=" + keyword</span><br><span class="line">result = requests.get(urlparse(url).geturl(),</span><br><span class="line">                      headers=&#123;“X-Naver-Client-Id”:“YOUR_CLIENT_ID”,</span><br><span class="line">                             “X-Naver-Client-Secret”:“YOUR_CLIENT_SECRET”&#125;)</span><br><span class="line">json_obj = result.json()</span><br><span class="line">print(json_obj)</span><br></pre></td></tr></table></figure><p>위 코드는 <code>keyword</code> 를 받아서 네이버 검색 api를 거친 후 <code>json_obj</code>를 반환한다.</p><p>이제 call을 하는 함수를 만들어 보자. 키워드를 입력한 후, 그 검색 결과를 한번에 100개씩 받아오는 함수를 작성한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(keyword, start)</span>:</span></span><br><span class="line">    encText = quote(keyword)</span><br><span class="line">    url = “https://openapi.naver.com/v1/search/blog?query=" + encText </span><br><span class="line">        + “&amp;display=<span class="number">100</span>” + “&amp;start=” + str(start)</span><br><span class="line">    result = requests.get(url=url, headers=&#123;“X-Naver-Client-Id”:“YOUR_CLIENT_ID”,</span><br><span class="line">                                          “X-Naver-Client-Secret”:“YOUR_CLIENT_SECRET”&#125;)</span><br><span class="line">    print(result)  <span class="comment"># Response [200]</span></span><br><span class="line">    <span class="keyword">return</span> result.json()</span><br></pre></td></tr></table></figure><p><code>&amp;display=100</code>은 한번에 100개의 검색 결과를 보여준다는 것이고, <code>&amp;start=</code>은 그 뒤의 숫자에 따라 어느 순서의 검색 결과부터 출력하는지를 결정한다. </p><p>뒤의 숫자는 그냥 두면 <code>int</code> 속성을 가지게 되므로, <code>str()</code>을 사용하여 <code>string</code>으로 바꾸어 url을 완성시킨다.</p><h4 id="데이터-수집-후-저장하기"><a href="#데이터-수집-후-저장하기" class="headerlink" title="데이터 수집 후 저장하기"></a>데이터 수집 후 저장하기</h4><p>이제, 검색 결과를 한번에 1000개 수집하여 json 파일로 저장해 보자.</p><p>모듈화를 위해 libs 폴더 내 naver_api_call 폴더를 만들고, 그 내부에 먼저 api_caller.py 파일을 만들어 작성하였다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># api_caller.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 네이버 api call</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(keyword, start)</span>:</span></span><br><span class="line">    encText = quote(keyword)</span><br><span class="line">    url = “https://openapi.naver.com/v1/search/blog?query=" + encText + </span><br><span class="line">    “&amp;display=<span class="number">100</span>” + “&amp;start=” + str(start)</span><br><span class="line">    result = requests.get(url=url, headers=&#123;“X-Naver-Client-Id”:“YOUR_CLIENT_ID”,</span><br><span class="line">                                          “X-Naver-Client-Secret”:“YOUR_CLIENT_SECRET”&#125;)</span><br><span class="line">    print(result)  <span class="comment"># Response [200]</span></span><br><span class="line">    <span class="keyword">return</span> result.json()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1000개의 검색 결과 받아오기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get1000results</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        list = list + call(keyword, num * <span class="number">100</span> + <span class="number">1</span>)[‘items’] <span class="comment"># list 안에 키값이 ’item’인 애들만 넣기</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><p>함수들을 만들었으니, 이제 실제로 사용해 보자. 우리가 할 일은 네이버 api call을 하고, 1000개의 키워드 검색 결과를 받아온 후, 이를 json파일에 저장하는 것이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 01_collect.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> libs.naver_api_call.api_caller <span class="keyword">import</span> get1000results</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">list = []</span><br><span class="line">result = get1000results(“강남역 맛집”)</span><br><span class="line">result_2 = get1000results(“강남역 찻집”)</span><br><span class="line">list = list + result + result_2</span><br><span class="line"> </span><br><span class="line">file = open(“./gangnam.json”, “w+”)  <span class="comment"># gangnam.json 파일을 쓰기 가능한 상태로 열기 (만들기)</span></span><br><span class="line">file.write(json.dumps(list))  <span class="comment"># 쓰기</span></span><br></pre></td></tr></table></figure><p>위 코드를 출력하면 정상적으로 <code>gangnam.json</code>이 디렉토리에 생성됨을 확인할 수 있다.</p><h4 id="pandas-사용하여-분석하기"><a href="#pandas-사용하여-분석하기" class="headerlink" title="pandas 사용하여 분석하기"></a>pandas 사용하여 분석하기</h4><p><code>pandas</code>는 여러가지 분석에 유용한 함수들을 제공하여, 길고 긴 json 파일을 보다 쉽고 빠르게 파악할 수 있도록 돕는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 02_analyze_pd.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">df = pd.read_json(“./gangnam.json”)</span><br><span class="line">print(df.count())  <span class="comment"># 각 key 별 숫자 출력</span></span><br><span class="line"> </span><br><span class="line">df_sum = df.groupby(“bloggername”).count()  <span class="comment"># groupby() 함수를 사용하여 bloggername별로 출력</span></span><br><span class="line">print(df_sum)</span><br><span class="line"> </span><br><span class="line">bloggernames = df[‘bloggername’]  <span class="comment"># bloggername 만 출력</span></span><br><span class="line">print(bloggernames)</span><br></pre></td></tr></table></figure><p><code>count()</code> 는 json 파일에 저장된 각각의 key값에 대한 데이터 숫자를 세어준다. 우리는 위에서 “강남역 맛집”으로 검색한 결과 1000개, 그리고 “강남역 찻집”으로 검색한 결과 1000개로 총 2000개의 결과값을 저장해 두었었다.</p><p><code>groupby()</code> 는 지정한 key값으로 결과값을 그룹화하여 보여준다. 결과값을 보면 어떤 bloggername을 가진 사람이 우리가 지정한 키워드에 대해서 블로깅을 많이 하였는지 알 수 있다.</p><p><img src="https://user-images.githubusercontent.com/25416425/54686400-8a3f7600-4b5c-11e9-8715-315304fda0d8.png" width="550"></p><p>세 번째 출력값은 현재 저장된 json 파일에서 bloggername 을 전부 출력해 본 것이다. 총 1640개의 블로그가 수집되었음을 알 수 있다.</p><p><img src="https://user-images.githubusercontent.com/25416425/54687073-100ff100-4b5e-11e9-8eda-8465816a34be.png" width="550"></p><blockquote><p>위 포스트는 Kyeongrok Kim님의 네이버 api 불러오기 예시를 실습해보고, 이를 간단히 정리한 것임을 밝힙니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번 포스트는 네이버 개발자 센터에서 제공하는 검색 api를 통해 우리가 원하는 키워드를 검색하고, 그 결과를 json파일로 저장하는 것을 다루어보겠다.&lt;/p&gt;
&lt;p&gt;json파일로 저장하는 이유는 &lt;code&gt;pandas&lt;/code&gt;와 같은 데이터 분석 툴을 사용할 때, import하기 좋은 파일 형식이기 때문이다.&lt;/p&gt;
&lt;p&gt;아래와 같은 순서로 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: 네이버 개발자센터 등록 및 키 값 받아오기&lt;/li&gt;
&lt;li&gt;Step 2: api caller 만들기&lt;/li&gt;
&lt;li&gt;Step 3: 데이터 수집 후 json 파일로 저장하기&lt;/li&gt;
&lt;li&gt;Step 4: pandas 사용하여 분석하기&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://jeongwookie.github.io/newblogtest/tags/Python/"/>
    
      <category term="WEB Crawling" scheme="https://jeongwookie.github.io/newblogtest/tags/WEB-Crawling/"/>
    
      <category term="Datamining" scheme="https://jeongwookie.github.io/newblogtest/tags/Datamining/"/>
    
  </entry>
  
  <entry>
    <title>네이버 금융, 주식 가격 크롤링하기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/03/18/190318-naver-finance-data-crawling-using-python/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/03/18/190318-naver-finance-data-crawling-using-python/</id>
    <published>2019-03-18T01:36:15.000Z</published>
    <updated>2019-03-24T11:12:43.291Z</updated>
    
    <content type="html"><![CDATA[<p>19년 3월부터 카이스트 데이터사이언스 연구실 (KAIST DS LAB)에서 일하기 시작했다.</p><p>가장 처음 맡은 일이 파이썬으로 특정 데이터들을 웹에서 크롤링하는 것인데, 예전에 <code>BeautlfulSoup4</code>으로 간단하게 몇 가지 다루어 본 것을 복습하는 겸 포스트를 작성하기로 했다. </p><p>기본적으로 작업은 파이참 (pyCharm)으로 진행했다.</p><a id="more"></a><h3 id="네이버-금융-웹에서-봉차트-데이터-수집하기"><a href="#네이버-금융-웹에서-봉차트-데이터-수집하기" class="headerlink" title="네이버 금융 웹에서 봉차트 데이터 수집하기"></a>네이버 금융 웹에서 봉차트 데이터 수집하기</h3><p>아래와 같은 순서로 진행한다.</p><ul><li>Step 1: 특정 종목의 가격 받아오기</li><li>Step 2: 여러 종목의 가격 받아오기</li><li>Step 3: 특정 종목의 봉차트 데이터 받아오기</li><li>Step 4: 여러 종목의 봉차트 데이터 받아오기</li></ul><p>시작하기 전, interpreter가 제대로 설치되어 있는지 체크하자.</p><p>우리가 이번에 사용할 패키지는 <code>requests</code> 와 <code>beautifulsoup4</code>이다.</p><p>맥에서는 preference -&gt; project interpreter에 가면 다운로드 및 확인이 가능하고,</p><p>윈도우에서는 file -&gt; setting -&gt; project interpreter에 가면 마찬가지로 확인이 가능하다.<br><img src="https://user-images.githubusercontent.com/25416425/54502101-45ed8380-496c-11e9-9ae6-d4de73d8a23b.png" width="550"><center> 맥에서 파이참 preference을 열었을 때 </center></p><h4 id="특정-종목의-가격-받아오기"><a href="#특정-종목의-가격-받아오기" class="headerlink" title="특정 종목의 가격 받아오기"></a>특정 종목의 가격 받아오기</h4><p>요즘 펄어비스가 신작을 발표하면서 주식 가격이 떡상(?)하고 있다. 개인적으로 관심이 가는 회사니까.. 여기 데이터를 한번 가져와 보자.</p><p>먼저 <a href="https://finance.naver.com/" target="_blank" rel="noopener">네이버 금융</a>에 접속해서 펄어비스를 검색해 보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54502363-8ef20780-496d-11e9-92b9-06bb0abe0c6e.png" width="550"><center> 빨간색 네모가 우리가 가져가고 싶은 데이터 </center></p><p>저 빨간색 네모 안의 숫자가 우리가 크롤링 하고 싶은 펄어버스 주식의 현재 가격이다. 크롬 (chrome)의 개발자 도구를 켜서 위치를 확인하자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54502950-7800e480-4970-11e9-85ac-7924cfa59680.png" width="550"><br><img src="https://user-images.githubusercontent.com/25416425/54503082-f9587700-4970-11e9-9615-e26feae53448.png" width="550"><br>이제 코드를 짜면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line">url = “https://finance.naver.com/item/main.nhn?code=263750"</span><br><span class="line">result = requests.get(url)</span><br><span class="line">bs_obj = BeautifulSoup(result.content, “html.parser”)</span><br><span class="line"> </span><br><span class="line">no_today = bs_obj.find(“p”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “no_today”&#125;) <span class="comment"># 태그 p, 속성값 no_today 찾기</span></span><br><span class="line">blind = no_today.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;) <span class="comment"># 태그 span, 속성값 blind 찾기</span></span><br><span class="line">now_price = blind.text</span><br><span class="line"> </span><br><span class="line">print(now_price)</span><br></pre></td></tr></table></figure><p>실행하면 <code>now_price</code>가 187,500이 제대로 출력됨을 확인할 수 있다.<br>(실시간으로 가격 변동이 발생 ㅠㅠ)</p><h4 id="여러-종목의-가격-받아오기"><a href="#여러-종목의-가격-받아오기" class="headerlink" title="여러 종목의 가격 받아오기"></a>여러 종목의 가격 받아오기</h4><p>자세히 보면, 우리가 입력한 url의 제일 뒤 숫자 6자리가 <strong>회사 코드</strong>임을 알 수 있다.</p><p>이를 원하는 코드로 바꿈으로써, 여러 회사들의 주식 가격을 가져올 수 있다.</p><p>위 코드에 대해서 <code>company_code</code>를 입력하면 <code>now_price</code>를 출력할 수 있도록 리팩토링 (refactoring) 해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line"><span class="comment"># company_code를 입력받아 bs_obj를 출력</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bs_obj</span><span class="params">(company_code)</span>:</span></span><br><span class="line">    url = “https://finance.naver.com/item/main.nhn?code=" + company_code</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    bs_obj = BeautifulSoup(result.content, “html.parser”)</span><br><span class="line">    <span class="keyword">return</span> bs_obj</span><br><span class="line"> </span><br><span class="line"><span class="comment"># company_code를 입력받아 now_price를 출력</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_price</span><span class="params">(company_code)</span>:</span></span><br><span class="line">    bs_obj = get_bs_obj(company_code)</span><br><span class="line">    no_today = bs_obj.find(“p”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “no_today”&#125;)</span><br><span class="line">    blind = no_today.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;)</span><br><span class="line">    now_price = blind.text</span><br><span class="line">    <span class="keyword">return</span> now_price</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 펄어비스 회사 코드는 ”263750”</span></span><br><span class="line"><span class="comment"># 삼성전자 회사 코드는 ”005930”</span></span><br><span class="line"><span class="comment"># 셀트리온 회사 코드는 ”068270”</span></span><br><span class="line">company_codes = [“<span class="number">263750</span>”, “<span class="number">005930</span>”, “<span class="number">068270</span>”]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> company_codes:</span><br><span class="line">    now_price = get_price(item)</span><br><span class="line">    print(now_price)</span><br></pre></td></tr></table></figure><p>실행하면, 펄어비스와 삼성전자, 그리고 셀트리온의 현재 주식 가격을 잘 받아오고 있음을 확인할 수 있다.</p><h4 id="특정-종목의-봉차트-데이터-받아오기"><a href="#특정-종목의-봉차트-데이터-받아오기" class="headerlink" title="특정 종목의 봉차트 데이터 받아오기"></a>특정 종목의 봉차트 데이터 받아오기</h4><p>이번에는 펄어비스의 전일, 고가, 시가, 저가 주식 데이터를 가져와 보자.</p><p>아까와 마찬가지로 먼저 데이터의 위치를 개발자 도구를 사용하여 알아보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54504757-4a1f9e00-4978-11e9-86ae-c3a715769c4a.png" width="550"><br><img src="https://user-images.githubusercontent.com/25416425/54504673-e4cbad00-4977-11e9-8a58-1abd7043586f.png" width="550"><br>빨간색 네모 안에 전일 주식 가격이 들어있음을 확인한 후, 코드를 짜보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line">url = “https://finance.naver.com/item/main.nhn?code=263750"</span><br><span class="line">result = requests.get(url)</span><br><span class="line">bs_obj = BeautifulSoup(result.content, “html.parser”)</span><br><span class="line"> </span><br><span class="line">td_first = bs_obj.find(“td”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “first”&#125;)  <span class="comment"># 태그 td, 속성값 first 찾기</span></span><br><span class="line">blind = td_first.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;)  <span class="comment"># 태그 span, 속성값 blind 찾기</span></span><br><span class="line">close = blind.text</span><br><span class="line"> </span><br><span class="line">print(close)</span><br></pre></td></tr></table></figure><p>전일 (close)에 해당하는 펄어비스의 주식 가격이 제대로 출력되고 있다.</p><p>위와 같은 방법으로, 고가 (high), 시가 (open), 저가 (low)에 대한 데이터의 위치를 찾아서 코딩하면 된다.</p><p>주의할 점은, <code>find()</code> 함수는 가장 처음 만나는 태그를 반환하므로, 그 뒤의 동일한 이름의 태그를 찾고 싶다면 <code>find_all()</code> 함수를 사용해야 한다.</p><p>또한, <code>find_all()</code>은 리스트 (list)를 반환한다.</p><p>대략적으로 각 데이터의 위치를 아래에 그려 보았다.<br><img src="https://user-images.githubusercontent.com/25416425/54505445-2ad64000-497b-11e9-8ac2-05785fa16ed5.png" width="550"></p><p><code>tr</code> 태그가 두 개, 그리고 각각의 태그 안에 <code>td</code> 태그가 세 개씩 있고, 첫 번째 <code>td</code>는 다행히도 속성값이 명시되어 있지만 두 번째 <code>td</code>부터는 그렇지 않다.</p><p>위와 같은 형태일 때는 모두를 포함하면서 속성값을 가지고 있어, 전체 데이터에서 특정지을 수 있는 태그부터 찾아서 narrow down해야 한다.</p><p>이번에는 그 역할로 <code>table</code> 태그의 속성값 <code>no_info</code>를 사용할 것이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line">url = “https://finance.naver.com/item/main.nhn?code=263750"</span><br><span class="line">result = requests.get(url)</span><br><span class="line">bs_obj = BeautifulSoup(result.content, “html.parser”)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#close 종가(전일)</span></span><br><span class="line">td_first = bs_obj.find(“td”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “first”&#125;)  <span class="comment"># 태그 td, 속성값 first 찾기</span></span><br><span class="line">blind = td_first.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;)  <span class="comment"># 태그 span, 속성값 blind 찾기</span></span><br><span class="line">close = blind.text</span><br><span class="line"> </span><br><span class="line"><span class="comment"># high 고가</span></span><br><span class="line">table = bs_obj.find(“table”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “no_info”&#125;)  <span class="comment"># 태그 table, 속성값 no_info 찾기</span></span><br><span class="line">trs = table.find_all(“tr”)  <span class="comment"># tr을 list로 []</span></span><br><span class="line">first_tr = trs[<span class="number">0</span>]  <span class="comment"># 첫 번째 tr 지정</span></span><br><span class="line">tds = first_tr.find_all(“td”)  <span class="comment"># 첫 번째 tr 안에서 td를 list로</span></span><br><span class="line">second_tds = tds[<span class="number">1</span>]  <span class="comment"># 두 번째 td 지정</span></span><br><span class="line">high = second_tds.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;).text</span><br><span class="line"> </span><br><span class="line"><span class="comment"># open 시가</span></span><br><span class="line">second_tr = trs[<span class="number">1</span>]  <span class="comment"># 두 번째 tr 지정</span></span><br><span class="line">tds_second_tr = second_tr.find_all(“td”)  <span class="comment"># 두 번째 tr 안에서 td를 list로</span></span><br><span class="line">first_td_in_second_tr = tds_second_tr[<span class="number">0</span>]  <span class="comment"># 첫 번째 td 지정</span></span><br><span class="line">open = first_td_in_second_tr.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;).text</span><br><span class="line"> </span><br><span class="line"><span class="comment"># low 저가</span></span><br><span class="line">second_td_in_second_tr = tds_second_tr[<span class="number">1</span>]  <span class="comment"># 두 번째 td 지정</span></span><br><span class="line">low = second_td_in_second_tr.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;).text</span><br><span class="line"> </span><br><span class="line">print(close)</span><br><span class="line">print(high)</span><br><span class="line">print(open)</span><br><span class="line">print(low)</span><br></pre></td></tr></table></figure><p>위 코드를 실행시키면, 펄어비스의 봉차트 주식 데이터가 제대로 출력됨을 확인할 수 있다.</p><h4 id="여러-종목의-봉차트-데이터-받아오기"><a href="#여러-종목의-봉차트-데이터-받아오기" class="headerlink" title="여러 종목의 봉차트 데이터 받아오기"></a>여러 종목의 봉차트 데이터 받아오기</h4><p>이제 위 코드에 대해서 <code>company_code</code>를 입력하면 봉차트 데이터를 출력할 수 있도록 리팩토링 (refactoring) 해보자.</p><p>입력값은 <code>company_code</code>이고, 리턴값은 <code>close</code>, <code>high</code>, <code>open</code>, <code>low</code>인 함수를 짜면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bs_obj</span><span class="params">(company_code)</span>:</span></span><br><span class="line">    url = “https://finance.naver.com/item/main.nhn?code=" + company_code</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    bs_obj = BeautifulSoup(result.content, “html.parser”)</span><br><span class="line">    <span class="keyword">return</span> bs_obj</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_candle_chart</span><span class="params">(company_code)</span>:</span></span><br><span class="line">    bs_obj = get_bs_obj(company_code)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># close 종가(전일)</span></span><br><span class="line">    td_first = bs_obj.find(“td”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “first”&#125;)  <span class="comment"># 태그 td, 속성값 first 찾기</span></span><br><span class="line">    blind = td_first.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;)  <span class="comment"># 태그 span, 속성값 blind 찾기</span></span><br><span class="line">    close = blind.text</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># high 고가</span></span><br><span class="line">    table = bs_obj.find(“table”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “no_info”&#125;)  <span class="comment"># 태그 table, 속성값 no_info 찾기</span></span><br><span class="line">    trs = table.find_all(“tr”)  <span class="comment"># tr을 list로 []</span></span><br><span class="line">    first_tr = trs[<span class="number">0</span>]  <span class="comment"># 첫 번째 tr 지정</span></span><br><span class="line">    tds = first_tr.find_all(“td”)  <span class="comment"># 첫 번째 tr 안에서 td를 list로</span></span><br><span class="line">    second_tds = tds[<span class="number">1</span>]  <span class="comment"># 두 번째 td 지정</span></span><br><span class="line">    high = second_tds.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;).text</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># open 시가</span></span><br><span class="line">    second_tr = trs[<span class="number">1</span>]  <span class="comment"># 두 번째 tr 지정</span></span><br><span class="line">    tds_second_tr = second_tr.find_all(“td”)  <span class="comment"># 두 번째 tr 안에서 td를 list로</span></span><br><span class="line">    first_td_in_second_tr = tds_second_tr[<span class="number">0</span>]  <span class="comment"># 첫 번째 td 지정</span></span><br><span class="line">    open = first_td_in_second_tr.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;).text</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># low 저가</span></span><br><span class="line">    second_td_in_second_tr = tds_second_tr[<span class="number">1</span>]  <span class="comment"># 두 번째 td 지정</span></span><br><span class="line">    low = second_td_in_second_tr.find(“span”, &#123;“<span class="class"><span class="keyword">class</span>”:</span> “blind”&#125;).text</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> &#123;“close”: close, “high”: high, “open”: open, “low”: low&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 펄어비스 회사 코드는 ”263750”</span></span><br><span class="line"><span class="comment"># 삼성전자 회사 코드는 ”005930”</span></span><br><span class="line"><span class="comment"># 셀트리온 회사 코드는 ”068270”</span></span><br><span class="line">company_codes = [“<span class="number">263750</span>”, “<span class="number">005930</span>”, “<span class="number">068270</span>”]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> company_codes:</span><br><span class="line">    candle_chart = get_candle_chart(item)</span><br><span class="line">    print(candle_chart)</span><br></pre></td></tr></table></figure><p>위 코드를 실행시키면 펄어비스, 삼성전자, 셀트리온의 주식 봉차트 데이터가 순서대로 출력됨을 확인할 수 있다.</p><p>다음 포스트에서는 조금 더 복잡한 데이터 크롤링을 다루어 보겠다.</p><blockquote><p>위 포스트는 Kyeongrok Kim님의 데이터 크롤링 예시를 실습해보고, 이를 간단히 정리한 것임을 밝힙니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;19년 3월부터 카이스트 데이터사이언스 연구실 (KAIST DS LAB)에서 일하기 시작했다.&lt;/p&gt;
&lt;p&gt;가장 처음 맡은 일이 파이썬으로 특정 데이터들을 웹에서 크롤링하는 것인데, 예전에 &lt;code&gt;BeautlfulSoup4&lt;/code&gt;으로 간단하게 몇 가지 다루어 본 것을 복습하는 겸 포스트를 작성하기로 했다. &lt;/p&gt;
&lt;p&gt;기본적으로 작업은 파이참 (pyCharm)으로 진행했다.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://jeongwookie.github.io/newblogtest/tags/Python/"/>
    
      <category term="WEB Crawling" scheme="https://jeongwookie.github.io/newblogtest/tags/WEB-Crawling/"/>
    
      <category term="Datamining" scheme="https://jeongwookie.github.io/newblogtest/tags/Datamining/"/>
    
  </entry>
  
  <entry>
    <title>R을 사용한 데이터 시각화, 2편</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/03/08/190308-data-visualization-using-R-2/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/03/08/190308-data-visualization-using-R-2/</id>
    <published>2019-03-08T07:06:15.000Z</published>
    <updated>2019-03-24T08:23:53.665Z</updated>
    
    <content type="html"><![CDATA[<p>지난 포스트에서는 기본적인 plot을 그리는 방법과, 가장 널리 쓰이는 패키지인 ggplot2을 간단히 다루어 보았다.</p><p>이번 포스트에서는 내장 데이터셋을 Barplot (막대 그래프) 으로 표현해 볼 것이다.</p><p>library는 마찬가지로 <code>gglpot2</code> <code>plotrix</code> <code>boot</code> <code>scatterplot3d</code> <code>lattice</code> <code>MASS</code> 을 기본으로 한다.</p><a id="more"></a><h3 id="데이터셋-sleep으로-Barplot-그리기"><a href="#데이터셋-sleep으로-Barplot-그리기" class="headerlink" title="데이터셋 sleep으로 Barplot 그리기"></a>데이터셋 sleep으로 Barplot 그리기</h3><p>먼저 <strong>sleep</strong>가 어떤 형태인지부터 보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54420514-84f1be00-474d-11e9-833d-22eb7ab4cf8c.png" alt></p><p>열이 세개로, 각각 extra, group, ID 라는 이름을 가지고 있다.</p><p>ID는 각각의 사람을 의미하고, group은 실험의 상태를 분류하며, extra는 이에 대한 결과값이다.</p><p>이제 x축은 ID, y축은 extra, 그리고 group별로 다른 색상을 나타내는 Barplot을 그려 보자.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">head(sleep)</span><br><span class="line"><span class="keyword">attach</span>(sleep) <span class="comment">#sleep내의 objects(extra, group, ID)를 이름으로 쉽게 접근가능</span></span><br><span class="line">y &lt;- rbind(extra[<span class="number">1</span>:<span class="number">10</span>], extra[<span class="number">11</span>:<span class="number">20</span>]) <span class="comment">#group별로 extra값을 나누어 row bind 시킴. form : num</span></span><br><span class="line">barplot(y, names.arg = ID[<span class="number">1</span>:<span class="number">10</span>], col = <span class="number">5</span>:<span class="number">6</span>, xlab = <span class="string">"ID"</span>, ylab = <span class="string">"Extra Sleep Hour"</span>, beside = <span class="literal">T</span>)</span><br><span class="line"><span class="comment"># beside는 논리값으로, True이면 값을 병렬적으로, False이면 값을 쌓아서 반환함</span></span><br><span class="line">abline(h=<span class="number">0</span>) <span class="comment">#높이가 0인 line을 덧그림</span></span><br><span class="line">legend(<span class="string">'topleft'</span>, title = <span class="string">'group'</span>, legend = <span class="number">1</span>:<span class="number">2</span>, fill = <span class="number">5</span>:<span class="number">6</span>) <span class="comment"># legend 추가</span></span><br></pre></td></tr></table></figure><p><strong>결과</strong><br><img src="https://user-images.githubusercontent.com/25416425/54420947-adc68300-474e-11e9-9d39-6d4eaae4db11.png" width="450"></p><p><code>attatch()</code>는 데이터를 붙인다는 뜻인데, 데이터 내의 오브젝트에 이름으로 접근이 가능해진다.</p><p>그래서 바로 아랫줄에서 <code>extra[1:10]</code> 이런 식으로 서술이 가능하고, 이를 <code>rbind()</code>을 사용하여 행렬로 만든다.</p><p><code>barplot()</code>을 사용하려면 제일 앞에 들어가는 y를 이처럼 vector 혹은 matrix 형태로 바꾸어 주어야 한다.</p><p>함수 내부의 <code>beside=</code> 옵션은 TRUE일 때 데이터를 병렬적으로 보여주고, FALSE이면 하나의 막대에 전부 합쳐서 출력한다.</p><h3 id="데이터셋-sleep으로-Barplot-그리기-ggplot2"><a href="#데이터셋-sleep으로-Barplot-그리기-ggplot2" class="headerlink" title="데이터셋 sleep으로 Barplot 그리기 (ggplot2)"></a>데이터셋 sleep으로 Barplot 그리기 (ggplot2)</h3><p>이번에는 동일한 barplot을 <code>ggplot2</code> 패키지를 사용해서 그려보자. 함수는 <code>geom_bar()</code>을 사용한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">ggplot(sleep, aes(x=ID, y=extra, fill = group))+ <span class="comment"># fill은 면의 컬러를 채울때 사용 </span></span><br><span class="line">  geom_bar(stat = <span class="string">"identity"</span>, position = <span class="string">"dodge"</span>)+ <span class="comment"># stat값을 identity로 지정하면 y 데이터를 높이로 사용</span></span><br><span class="line">  <span class="comment"># position을 default로 놔두면 값이 쌓아지고, dodge를 할당하면 병렬적으로 출력됨</span></span><br><span class="line">  theme_bw() <span class="comment"># data가 더 잘보이기 위한 테마</span></span><br></pre></td></tr></table></figure><p><strong>결과</strong><br><img src="https://user-images.githubusercontent.com/25416425/54421682-4ad5eb80-4750-11e9-9866-e0b3094a2b87.png" width="450"></p><p>먼저 <code>ggplot()</code>에서 인풋 데이터를 지정하고, aes 안에 x,y축 데이터를 지정하였는데 그다음에 <code>fill = group</code>이라는 옵션을 사용하였다.</p><p>대단히 자주 쓰이는 표현으로, <u>group에 따라 면의 컬러를 다르게 칠하라는 뜻</u>이다.</p><p><code>geom_bar()</code>은 본 패키지에서 barplot을 그리게 하는 함수로, 가장 자주 쓰이는 옵션이 바로 <code>stat=</code> 과 <code>position=</code>이다.</p><p><strong>stat</strong>은 statistic의 약자로, 바 그래프의 형태에 대해서 지정하는 옵션이다. <code>stat=&#39;identity&#39;</code>라고 쓰게 되면, y축 데이터를 높이로 하는 바 그래프를 그리라는 뜻이다.</p><p><strong>position</strong>은 막대의 위치를 의미하며, <code>position=&#39;dodge&#39;</code>는 여러 데이터를 독립적인 바 그래프로 나란히 표현할 때 사용한다. 이 옵션을 표기하지 않으면 데이터가 하나의 막대로 표시된다. </p><p><img src="https://user-images.githubusercontent.com/25416425/54422623-401c5600-4752-11e9-9ba1-526d71c32915.png" width="450"></p><center> position=dodge 를 표기하지 않았을 때 </center><h3 id="데이터셋-USPersonalExpenditure으로-Barplot-그리기"><a href="#데이터셋-USPersonalExpenditure으로-Barplot-그리기" class="headerlink" title="데이터셋 USPersonalExpenditure으로 Barplot 그리기"></a>데이터셋 USPersonalExpenditure으로 Barplot 그리기</h3><p>먼저 <strong>USPersonalExpenditure</strong>가 어떤 형태인지 알아보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54423376-e74dbd00-4753-11e9-9c56-3c657d5f3e6a.png" width="500"></p><p>Matrix의 형태로, 행에는 지출 항목, 그리고 열에는 년도가 기록되어 있다. 이들이 만나는 곳에는 실제 지출의 크기가 표기되어 있다.</p><p>이제 이 데이터를 최대한 잘 파악하기 위해, 년도별로 지출의 크기를 각 항목으로 나누어 바 그래프를 그려 보자.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data(USPersonalExpenditure) <span class="comment"># Global Environment에 데이터 추가</span></span><br><span class="line">UPE &lt;- USPersonalExpenditure <span class="comment"># 너무 길어서 간략화</span></span><br><span class="line">str(UPE) <span class="comment">#데이터의 form확인 : num</span></span><br><span class="line">barplot(UPE, beside = <span class="literal">T</span>, col = <span class="number">2</span>:<span class="number">6</span>, xlab = <span class="string">"Year"</span>, ylab = <span class="string">"Expenditure ($)"</span>, main = <span class="string">"United States Personal Expenditures"</span>)</span><br><span class="line">legend(<span class="string">'topleft'</span>, legend = row.names(UPE), fill = <span class="number">2</span>:<span class="number">6</span>, cex = <span class="number">0.7</span>) <span class="comment"># legend의 이름을 data의 row.name으로</span></span><br></pre></td></tr></table></figure><p><strong>결과</strong><br><img src="https://user-images.githubusercontent.com/25416425/54423687-968a9400-4754-11e9-9f62-b28064818b10.png" width="450"></p><p>원하는 대로 깔끔하게 data visualization 에 성공했다!</p><p>앞선 <strong>sleep</strong>와 마찬가지로 데이터를 병렬적으로 표기하기 위해 <code>beside=T</code> 옵션을 넣었고, 각각의 막대 컬러를 2번 ~ 6번 색상으로 다르게 지정했다.</p><p>그리고 <code>legend()</code>를 사용하여 따로 범례를 추가하였는데, 범례 이름은 <strong>UPE</strong>의 행 이름으로 지정했고, 색상은 <code>fill=</code>을 사용하여 앞서 지정하였던 막대 컬러 2~6번과 동일하게 하였다.</p><p>또한 <code>cex=</code>가 등장하였는데, 이는 글자 크기를 조절하는 데에 사용하며 비율로 결정되므로 적절히 조절해서 숫자를 넣으면 된다. 자주 쓰이는 옵션이니 기억해 두자.</p><p>이어지는 포스트에서는 barplot 외에 자주 쓰이는 pie chart 와 histogram에 대해 다루어 볼 예정이다.</p><blockquote><p><em>본 포스트는 KAIST 전산학부 대학원 과정에서 수강하고 있는 Big Data Analytics using R (CS564)을 실습하며 작성하였음을 밝힙니다.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;지난 포스트에서는 기본적인 plot을 그리는 방법과, 가장 널리 쓰이는 패키지인 ggplot2을 간단히 다루어 보았다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 내장 데이터셋을 Barplot (막대 그래프) 으로 표현해 볼 것이다.&lt;/p&gt;
&lt;p&gt;library는 마찬가지로 &lt;code&gt;gglpot2&lt;/code&gt; &lt;code&gt;plotrix&lt;/code&gt; &lt;code&gt;boot&lt;/code&gt; &lt;code&gt;scatterplot3d&lt;/code&gt; &lt;code&gt;lattice&lt;/code&gt; &lt;code&gt;MASS&lt;/code&gt; 을 기본으로 한다.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="R programming" scheme="https://jeongwookie.github.io/newblogtest/tags/R-programming/"/>
    
      <category term="Class" scheme="https://jeongwookie.github.io/newblogtest/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>R을 사용한 데이터 시각화, 1편</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/03/06/190306-data-visualization-using-R-1/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/03/06/190306-data-visualization-using-R-1/</id>
    <published>2019-03-06T12:54:08.000Z</published>
    <updated>2019-03-24T13:50:58.072Z</updated>
    
    <content type="html"><![CDATA[<p>R은 데이터 시각화에 강력한 라이브러리들을 여럿 가지고 있어서 매우 유용하다.</p><p>이번 포스트에서 사용할 라이브러리는 아래와 같다.</p><p>library : <code>gglpot2</code> <code>plotrix</code> <code>boot</code> <code>scatterplot3d</code> <code>lattice</code> <code>MASS</code></p><a id="more"></a><p>먼저, 내장 데이터셋인 <strong>faithful</strong> 을 기본 함수 <code>plot()</code>을 통해 그려보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54251976-80ca7280-458c-11e9-99f8-fe3fbbb703b6.png" alt="faithful의 개략적 형태"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">head(faithful)</span><br><span class="line">fa &lt;- faithful[order(faithful$waiting),] </span><br><span class="line"><span class="comment"># waiting을 오름차순으로 정렬한 값을 fa에 저장</span></span><br><span class="line">head(fa)</span><br><span class="line">x &lt;- fa[,<span class="number">2</span>]; y &lt;- fa[,<span class="number">1</span>] </span><br><span class="line"><span class="comment"># waiting을 x에, eruptions을 y에 저장</span></span><br><span class="line">plot(x,y,type=<span class="string">"l"</span>, col=<span class="number">4</span>, xlab = <span class="string">"Waiting Time"</span>, ylab = <span class="string">"Eruption Time"</span>, main = <span class="string">"Old Faithful Eruptions"</span>)</span><br><span class="line">points(x,y, pch=<span class="number">20</span>, col=<span class="number">3</span>) </span><br><span class="line"><span class="comment"># pch는 점의 생김새를 의미, 20은 작은 점</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25416425/54250526-76f24080-4587-11e9-8024-211abb8730cf.png" width="450"></p><p>fa는 <em>waiting</em> 열을 <code>order()</code>을 통해 정렬한 <strong>faithful</strong> 데이터를 기록한 것이다.</p><p>즉, fa[,1] = fa$eruptions 이고, fa[,2] = fa$waiting 이다.</p><p><code>plot()</code>은 type을 지정할 수 있으며, 여기서는 line을 나타내었다.</p><p><code>point()</code>는 말 그대로 점을 찍는 함수이며, 여기서 점의 생김새를 결정하는 <strong>pch=</strong> 를 한번 보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54250863-bbcaa700-4588-11e9-9085-411761ab6e28.png" width="300"></p><p>여러가지 타입이 있다는 것만 알면 된다. 중요한 것은 <strong>pch=</strong> 가 점의 타입을 결정하는 요소이며 자주 쓰이는 것이 <strong>pch = 20(점), 21, 22, 23, 24, 25</strong> 라는 사실이다.</p><p>이번에는 동일한 데이터를 <code>ggplot2</code> 패키지를 통해서 그려 보자.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">ggplot(fa, aes(x,y))+</span><br><span class="line">  geom_point(col=<span class="number">3</span>) + geom_line(col=<span class="number">4</span>) + <span class="comment"># 점을 찍을 때 geom_point를 사용</span></span><br><span class="line">  xlab(<span class="string">'Waiting time'</span>) + ylab(<span class="string">'Eruption time'</span>)+</span><br><span class="line">  ggtitle(<span class="string">'Old Faithful Eruption'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25416425/54251159-bc177200-4589-11e9-8d10-8a0cbbc34cb9.png" width="450"></p><p>역시 <code>ggplot2</code> 답게 그래프 디자인이 조금 더 깔끔해 보인다.</p><p><code>ggplot()</code>함수는 어떤 데이터로 어느 축에 할당할 것인지 정한다. 이 함수만 출력하면 <u>아무것도 plot되지 않음에 주의하자.</u> 실제로 점을 찍고 선을 긋는 함수는 뒤에 있다.</p><p>자주 쓰이는 형태는 <code>ggplot(data, aes(x = , y = , fill = ))</code>으로, fill값에 대해서는 뒤에 다시 설명하겠다.</p><p><code>geom_point()</code>는 말그대로 점을 찍는 함수이다. 여기에도 여러가지 디자인 요소들이 있지만 자주 쓰이는 것은 <strong>col=</strong> 으로, 점의 색상을 결정한다.</p><p>이외에도 점의 모양을 결정하는 <strong>shape=</strong>, 점의 색상을 요소(factor)에 따라 변화하게 하는 <strong>aes(fill=)</strong>, 점의 크기를 결정하는 <strong>size=</strong> 등이 쓰이는데 자세한 것은 <a href="https://ggplot2.tidyverse.org/reference/geom_point.html" target="_blank" rel="noopener">여기</a>를 참고하자.</p><p><code>geom_line()</code>은 선을 긋는 함수이다. 마찬가지로 <strong>col=4</strong>라고 적음으로써 4번 색상인 파랑을 출력하고 있다. 자세한 디자인 요소 변경은 <a href="https://m.blog.naver.com/coder1252/221031694057" target="_blank" rel="noopener">여기</a>를 참고하자.</p><p>이번에는 또 다른 내장 데이터인 <strong>diamonds</strong> 를 <code>ggplot2</code>로 그려 보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/54252070-c6873b00-458c-11e9-934b-2f1d1fed3da7.png" alt="diamonds 데이터의 형태"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head(diamonds)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">ggplot(diamonds, aes(x=carat, y=price)) +</span><br><span class="line">  geom_point(aes(col=color)) + <span class="comment"># point의 컬러(col)를 color라는 변수값에 따라 변하도록 설정</span></span><br><span class="line">  facet_grid(color ~ .) <span class="comment"># ~을 사용한 format</span></span><br></pre></td></tr></table></figure><p><code>ggplot()</code>에서 x축 데이터를 carat열, 그리고 y축 데이터를 price열 로 설정하였다.</p><p>그리고 <code>geom_point()</code>로 점을 찍는데, 그 점들의 색상을 <u>color열의 요소에 따라 달라지도록 지정하였다.</u></p><p>마지막으로, 새로운 함수가 하나 나타났는데 바로 <code>facet_grid()</code>.</p><p>주로 <strong>집단(group) 간의 효과적인 비교를 위해 면을 분할하고 싶을 때</strong> 사용한다.</p><p>또한, 많은 경우 <code>x ~ y</code>와 같은 형태로 작성하는데, 이는 표현 그대로 좌측은 x (input), 우측은 y (output)을 의미하는 간략한 함수 형태이다.</p><p>위의 <code>facet_grid(color ~ .)</code>은 color에 따라 나머지 모든 데이터를 그룹화 하여 면을 분할 해서 표현하라는 의미로 해석된다. 참고는 <a href="https://rfriend.tistory.com/85" target="_blank" rel="noopener">여기</a></p><p>만약 <code>facet_grid(. ~ color)</code>로 쓴다면, 쉽게 말해서 x와 y가 반전되어 출력된다. (세로)</p><div style="width:50%; height:350px; float:left;"><br><img src="https://user-images.githubusercontent.com/25416425/54253074-ba9d7800-4590-11e9-8bf7-eb477fea57fa.png" width="350"><br></div><div style="width:50%; height:350px; float:right;"><br><img src="https://user-images.githubusercontent.com/25416425/54253032-95106e80-4590-11e9-8cd2-03386699c406.png" width="350"><br></div><p>왼쪽은 <strong>facet_grid(color ~ .)</strong> 이고, 오른쪽은 <strong>facet_grid(. ~ color)</strong> 의 결과물이다. 위의 <code>geom_point()</code> 세팅에 따라, 점의 색상이 <strong>diamonds$color</strong>의 값에 따라 달라짐을 알 수 있다.</p><p>이어지는 포스트에서는 기본 plot외의 bar, histogram 등의 형태를 다루어 볼 것이다.</p><blockquote><p><em>본 포스트는 KAIST 전산학부 대학원 과정에서 수강하고 있는 Big Data Analytics using R (CS564)을 실습하며 작성하였음을 밝힙니다.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;R은 데이터 시각화에 강력한 라이브러리들을 여럿 가지고 있어서 매우 유용하다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서 사용할 라이브러리는 아래와 같다.&lt;/p&gt;
&lt;p&gt;library : &lt;code&gt;gglpot2&lt;/code&gt; &lt;code&gt;plotrix&lt;/code&gt; &lt;code&gt;boot&lt;/code&gt; &lt;code&gt;scatterplot3d&lt;/code&gt; &lt;code&gt;lattice&lt;/code&gt; &lt;code&gt;MASS&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="R programming" scheme="https://jeongwookie.github.io/newblogtest/tags/R-programming/"/>
    
      <category term="Class" scheme="https://jeongwookie.github.io/newblogtest/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>좋은 서비스 디자인하기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/02/08/190208-goal-directed-design/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/02/08/190208-goal-directed-design/</id>
    <published>2019-02-08T09:17:43.000Z</published>
    <updated>2019-03-24T10:53:01.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="목표-지향-디자인-방법론"><a href="#목표-지향-디자인-방법론" class="headerlink" title="목표 지향 디자인 방법론"></a>목표 지향 디자인 방법론</h2><p>좋은 서비스, 소프트웨어를 만들기 위해서는 어떻게 해아 할까?</p><p>이는 비즈니스 초기부터 서비스 출시, 그리고 그 이후의 고객과의 인터렉션을 모두 포함하고 있는 궁극적인 질문일 것이다.</p><p>창업하는 이들 모두가 궁금한 이 질문에 대해 멘탈 모델을 기반으로 하는 방법론을 소개하고자 한다.<br>(멘탈모델이 무엇인가는 <a href="https://jeongwookie.github.io/2018/11/06/kaist-e5-item-interview/">멘탈 모델을 적용한 고객 인터뷰</a>를 참고하자)</p><p>바로 <strong>목표 지향 디자인 방법론 (Goal Directed Design)</strong> 이다. 이것은 사용자의 목표를 이해하기 위한 하나의 프로세스 라고 이해하면 되는데, 여기서 사용자의 목표란 제품을 활용해서 자신이 성취하고자 하는 바가 무엇인지 또는 경쟁사 상품 대신 왜 이걸 선택하는지 와 같은 것이다.</p><p><img src="https://user-images.githubusercontent.com/25416425/52469737-a3edb500-2bcf-11e9-857e-f279f50bdecf.png" width="500"></p><a id="more"></a><p>많은 기존의 서비스들을 생각해보자. 혹시 사용하다가 <strong>스스로 멍청하다고 느껴본 적이 없는가?</strong> 서비스가 사용하기 너무 복잡하거나, 사용자가 실수할 법한 여지를 남겨두어 여지없이 거기에 걸렸다던가.. 나는 한글(.hwp)과 같은 문서 편집기를 사용하다가 키보드를 내려친 적이 몇번 있다. </p><p>우리는 사용자를 가르치려 드는 서비스를 만들려고 하는 것이 아니다.</p><p>이런 이상적인 서비스 개발에는 <strong>디자이너</strong>의 역할이 매우 중요하다. 또한 이들의 개입 순서가 어디인가에 따라 결과물이 크게 달라지는데, 윗 그림의 아래와 같은 방법을 따라가 보자.</p><p><strong>목표 지향 디자인</strong>은 사용자의 목표와 니즈를 만족시킬 뿐 아니라, 사업 측면의 요구 사항과 기술 구현 가능성을 효과적으로 조화시킬 수 있는 접근 방식이다.</p><p>이 방식은 크게 리서치, 사용자 모델, 요구사항 도출, 디자인 설계, 수정, 관리 등 총 6가지 스텝으로 구성되어 있다. 이 중에서 비즈니스를 설계하는 최초부터 중요한 insight를 제공할 수 있는 첫번째 스텝을 본 포스트에서는 다루고자 한다.</p><p>디자인에 필수적인 요소를 깊이 이해하려면 반드시 <strong>정성적 리서치</strong>를 도입해야 한다. <code>무엇을</code>, <code>어떻게</code>, <code>왜</code> 해야 하는지 명확한 답을 얻기 위한 것이 우리의 목표이다. 이때, 인터뷰 대상을 선정하거나 임원진 혹은 투자자에게 제품 구축을 납득시키기 위해서 기존의 정량적 리서치 (마케팅 리서치) 자료를 참고할 수 있다.</p><p>정성적 리서치는 훌륭한 디자인을 이끌어내는 지름길이다. 그렇다면 구체적으로 어떻게 정성적 리서치를 진행해야 할까?</p><p><img src="https://user-images.githubusercontent.com/25416425/52470582-e3b59c00-2bd1-11e9-913d-e24f506063bc.png" width="300"></p><p>아래의 구체적 프로세스를 설명하기 전, 실행하는 주체는 <strong>실제 서비스를 설계하는 사람</strong> 이라고 정한다.</p><h3 id="킥오프-미팅"><a href="#킥오프-미팅" class="headerlink" title="킥오프 미팅"></a>킥오프 미팅</h3><p>킥오프 미팅은 초기 창업자들 서로에게 질문하는 것으로도 유용하다. 앞으로의 제품, 사용자, 디자인 문제에 대해 어떻게 생각하는지에 대해 서로간 통찰이 생긴다. 핵심 질문은 아래와 같다.</p><ul><li>제품은 무엇인가? (솔루션)</li><li>누가 사용하며, 사용할 것인가? (고객)</li><li>사용자가 무엇을 가장 필요로 하는가? (핵심 가치 및 기능)</li><li>어떤 고객과 사용자가 사업에 가장 중요한가? (핵심 고객 및 키 파트너)</li><li>팀은 프로젝트 진행 중 어떤 과제에 직면하는가? (운영)</li><li>어디를 가장 큰 경쟁사로 보는가? 그 이유는 무엇인가? (경쟁사 분석)</li><li>제품의 사업 및 기술 영역에 친숙해지려면 어떤 분야를 공부해야 하는가?</li></ul><p>위 질문을 찬찬히 살펴보면, 창업자 스스로가 어떤 부분을 초기에 답변하려 아이템을 설계해야 하는지 알 수 있다.</p><p>또한, 초기 스타트업에 합류하는 팀원의 경우에도 같은 질문을 기존 경영진들에게 질문할 수 있을 것이다.</p><p>위의 질문들이 <strong>가장 첫번째 스텝</strong>임에 유의하라. 이는 창업자 개인의 생각일 수 있고, 사전에 진행한 리서치의 결과물일 수 있다. 답변을 충분히 듣고 (생각하고), 실제 서비스를 설계하는 것은 <u>정성적 리서치의 모든 프로세스를 진행한 후에 해야 한다.</u></p><h3 id="문헌-조사"><a href="#문헌-조사" class="headerlink" title="문헌 조사"></a>문헌 조사</h3><p>킥오프 미팅을 진행함과 동시에 기존 문서의 내용을 잘 파악해야 한다. 창업자가 설계한 제품 (서비스)과 관련된 영역에 관한 문헌을 조사한다. 여행 관련 플렛폼에 대한 아이디어라면 여행 트렌드, 관련 기사, 플렛폼에 관한 이해 등이 여기에 해당한다.</p><p>이는 인터뷰를 진행하기 전, 질문할 내용을 준비할 때에 큰 도움이 된다. 또한 사용자 조사에서 얻은 자료를 분석할 때에도 중요한 기반이 된다.</p><h3 id="기존-제품-및-경쟁사-분석"><a href="#기존-제품-및-경쟁사-분석" class="headerlink" title="기존 제품 및 경쟁사 분석"></a>기존 제품 및 경쟁사 분석</h3><p>기존의 제품과 주요 경쟁사 제품 분석은 현재 사용자에게 제공되고 있는 기능을 분명히 이해할 수 있도록 돕는다. 다만, 너무 구체적인 기능에 대한 조사는 지양하는 것이 좋아 보인다. 자칫하다가는 기존의 프레임에 생각이 갇힐 위혐이 있다. 가볍게 경쟁사의 고객 전달 가치가 무엇인지, 그리고 마켓 포지셔닝을 어떻게 하고 있는지 정도가 적절하다. (투자 및 매출 현황도 같이 살피면 유용할 것이다)</p><h3 id="임원진-인터뷰"><a href="#임원진-인터뷰" class="headerlink" title="임원진 인터뷰"></a>임원진 인터뷰</h3><p>임원진 인터뷰는 제품을 디자인하기 전 사업 목표를 분명히 이해하는 데에 큰 도움이 된다. 초기 스타트업은 창업자의 초기 비전을 들어보는 것이다. 임원진 인터뷰에서 얻을 수 있는 중요한 정보는 다음과 같다.</p><ul><li>초기 비전과 기대: 팀원들의 완성 제품에 대한 기대치가 제각각인 경우가 많다.</li><li>비용과 일정: 얼마나 많은 자원을 투자할 수 있는지 명확히 하는 것은 매우 중요하다.</li><li>기술적 제약과 가능성: 현재 구현할 수 있는 범위가 어느 정도인지 파악하여야 한다.</li><li>사업 전략: 성취하려는 사업 목표가 무엇인지 알면 차후 중요한 의사결정을 내릴때 큰 도움이 된다.</li><li>임원진이 생각하는 사용자: 팀원마다 주요 예상 사용자가 다를 수 있다.</li></ul><h3 id="영역-전문가-인터뷰"><a href="#영역-전문가-인터뷰" class="headerlink" title="영역 전문가 인터뷰"></a>영역 전문가 인터뷰</h3><p>디자인 프로젝트 초기에 영역 전문가에게 자문을 구하는 것은 때론 매우 중요할 수 있다. 영역 전문가란 디자인하려는 제품의 분야를 매우 잘 아는 사람을 의미한다.</p><p>예를 들어 의료 분야의 스타트업은 보통 설계하려는 아이템이 복잡하고, 기술집약적이며, 법적 고려를 해야하는 경우가 많은데, 디자인을 시작하기 전 자문을 구하는 것은 필수적이다.</p><p>다만, 영역 전문가들을 인터뷰할 때에는 아래와 같은 주의가 필요하다.</p><ul><li><strong>영역 전문가는 고급 사용자임에 유의하여야 한다.</strong> 이들은 기존 제품에 너무 익숙하여 새로운 디자인을 제시하기는 어렵다. 또한 같은 기능이라도 전문가만 사용할 수 있는 기능을 선호하는 경향이 있다.</li><li><strong>영역 전문가의 의견은 중요하지만, 그들이 디자이너는 아니다.</strong> 실제로 그들이 내놓은 아이디어가 도움이 될수도 있고, 아닐 수도 있다. <em> “이 가능이 사용자에게 어떤 도움이 될까?” </em>를 항상 염두하자.</li><li><strong>복잡하고 전문적인 분야일수록 영역 전문가가 필수적이다.</strong> 이들의 지식을 활용하면 복잡한 사용자 리서치를 보다 쉽게 설계할 수 있다.</li><li><strong>지속적으로 영역 전문가를 만나서 자문을 구해야 한다.</strong> 이들이 꼭 필요한 제품을 만든다면, 디자인을 진행하는 동안 여러 번 만나서 자문을 구하여야 한다.</li></ul><h3 id="구매자-인터뷰"><a href="#구매자-인터뷰" class="headerlink" title="구매자 인터뷰"></a>구매자 인터뷰</h3><p>구매자는 사용자와 다른 개념이다. <strong>구매자</strong>란 제품의 구매 의사결정을 내라는 사람을 말한다. 일반적인 소비 제품의 경우에는 구매자와 사용자가 동일하지만, 대부분의 경우 다르다. </p><p>어린이용 제품의 사용자는 어린이지만 구매자는 부모이며, 기술 제품의 경우에도 사용자는 직원이지만 구매자는 이사급 임원진 혹은 IT관리자이다.</p><p>성공적인 제품을 디자인하려면 반드시 구매자의 목표를 이해하고, 이들을 만족시켜야 매출로 연결된다.</p><ul><li>제품을 구입하는 목표</li><li>현재 사용중인 제품에서 겪는 어려움</li><li>유사한 제품 구입 시 의사결정 과정</li><li>제품의 설치, 유지, 관리에서 구매자의 역할</li><li>사업 영역의 특징과 이슈</li></ul><p>때때로 이들을 인터뷰하는 도중 더 훌륭한 아이디어를 발견할 수 있다. 구매자가 왜 그런 의견을 냈는지 분석하는 과정이 그래서 매우 중요하다. </p><h3 id="사용자-인터뷰"><a href="#사용자-인터뷰" class="headerlink" title="사용자 인터뷰"></a>사용자 인터뷰</h3><p>디자인의 중심은 항상 사용자이다. 이들이 바로 실제로 제품을 가장 활발하게 사용하기 때문이다. 이들을 이해하려면 실제로 사용자가 제품을 이용하는 공간에서 조사를 진행햐난 것이 바람직하다.</p><p>그렇다면 구체적으로 어떻게 사용자를 인터뷰 하는 것이 좋을까? 가장 효과적인 방법은 <code>사용자 관찰</code>과 <code>일대일 인터뷰</code>를 병행하는 것이다. 이러한 방법론을 <strong>에스노그라피 인터뷰 (Ethnographic Interview)</strong> 라고도 한다.</p><p>에스노그래피는 원래 인류학에서 주로 사용하는 용어인데, 인류의 문화에 대한 체계적이고 집중적인 연구를 의미한다. 인류학자들은 연구를 진행할 때 해당 문화를 직접 체험하면서 수녕간 자료를 기록하고 분석한다. 이러한 기본 컨셉을 소규모 리서치에 적용한 것이다.</p><p>사용자 조사에서는 사용자와 제품이 어떻게 인터렉션 하는지 사용자의 <code>행동 패턴</code>과 <code>태도</code>를 이해하는 게 목표이다. 구체적으로 에스노그라피 인터뷰를 진행하는 데에 염두해야 하는 내용은 아래와 같다.</p><ul><li>직접 사용자를 찾아가 인터뷰하라.</li><li>정해진 질문지를 피하라.</li><li>전문가가 아니라 초심자의 역할을 가정하라.</li><li>끝이 있는 질문과 없는 질문을 적절히 하여 논의를 유도하라.</li><li>사용자의 목표를 먼저, 과업은 나중에 파악하라.</li><li>사용자는 디자이너가 아니다.</li><li>기술에 대한 토론은 하지 않는다.</li><li>사용자의 이야기를 들어라.</li><li>사용자의 업무와 작업물을 관찰하라.</li><li>유도 질문을 피하라.</li></ul><p>인터뷰를 진행하면서, 사용자가 제품에 대한 디자인 의견을 제시하는 경우가 있다. 이때, 의견 자체에 초점을 맞추기 보다는 <strong>왜 그렇게 생각하는지 뒤에 깔린 목표를 파악하여야 한다.</strong> 아래와 같이 질문해 보자.</p><p><em>“그렇게 하면 어떤 문제가 해결될까요?</em></p><p><em>“왜 그렇게 바꾸고 싶은가요?</em></p><p>디자인 프로세스의 초기 단계에 에스노그라피 인터뷰를 진행하면 매우 값진 결과를 얻을 수 있다.</p><p>사용자를 깊이 이해하고, 사용자의 니즈와 목표를 파악하여 좋은 서비스를 만드는 데에 도전해 보자.</p><p><img src="https://user-images.githubusercontent.com/25416425/52473359-ed8ecd80-2bd8-11e9-86e0-7206156e869a.jpg" alt></p><blockquote><p><em>위 포스트는 About Face, 인터렉션 디자인의 본질을 읽고 작성하였습니다.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;목표-지향-디자인-방법론&quot;&gt;&lt;a href=&quot;#목표-지향-디자인-방법론&quot; class=&quot;headerlink&quot; title=&quot;목표 지향 디자인 방법론&quot;&gt;&lt;/a&gt;목표 지향 디자인 방법론&lt;/h2&gt;&lt;p&gt;좋은 서비스, 소프트웨어를 만들기 위해서는 어떻게 해아 할까?&lt;/p&gt;
&lt;p&gt;이는 비즈니스 초기부터 서비스 출시, 그리고 그 이후의 고객과의 인터렉션을 모두 포함하고 있는 궁극적인 질문일 것이다.&lt;/p&gt;
&lt;p&gt;창업하는 이들 모두가 궁금한 이 질문에 대해 멘탈 모델을 기반으로 하는 방법론을 소개하고자 한다.&lt;br&gt;(멘탈모델이 무엇인가는 &lt;a href=&quot;https://jeongwookie.github.io/2018/11/06/kaist-e5-item-interview/&quot;&gt;멘탈 모델을 적용한 고객 인터뷰&lt;/a&gt;를 참고하자)&lt;/p&gt;
&lt;p&gt;바로 &lt;strong&gt;목표 지향 디자인 방법론 (Goal Directed Design)&lt;/strong&gt; 이다. 이것은 사용자의 목표를 이해하기 위한 하나의 프로세스 라고 이해하면 되는데, 여기서 사용자의 목표란 제품을 활용해서 자신이 성취하고자 하는 바가 무엇인지 또는 경쟁사 상품 대신 왜 이걸 선택하는지 와 같은 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25416425/52469737-a3edb500-2bcf-11e9-857e-f279f50bdecf.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Startup Story" scheme="https://jeongwookie.github.io/newblogtest/categories/Startup-Story/"/>
    
    
      <category term="Startup" scheme="https://jeongwookie.github.io/newblogtest/tags/Startup/"/>
    
      <category term="Business" scheme="https://jeongwookie.github.io/newblogtest/tags/Business/"/>
    
      <category term="Service Design" scheme="https://jeongwookie.github.io/newblogtest/tags/Service-Design/"/>
    
  </entry>
  
  <entry>
    <title>문득 떠오른 취미</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/02/03/190203-find-a-new-hobby/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/02/03/190203-find-a-new-hobby/</id>
    <published>2019-02-02T17:38:28.000Z</published>
    <updated>2019-03-24T10:53:26.611Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;문득 든 배우고 싶은 취미에 대한 일기&gt;</p><p>나는 음악을 많이 듣는 편은 아니다.</p><p>기차를 타고, 버스를 타고 갈 때에도 잠을 청하기 위해 가끔 음악을 듣곤 하지만.. 아무것도 귀에 꼽지 않고 갈때가 훨씬 많다.</p><p>하지만 가끔 좋은 뉴에이지 음악을 들을 때, 음색이 매력적인 기타 소리를 들을 때 나도 저렇게 연주하고 싶다는 생각은 종종 든다.</p><a id="more"></a><p>어머니께서 내가 초등학생이 되기 전까지 성악을 하셨다.</p><p>연주회에 가서 어머니를 기다렸던 기억이 조금씩 난다.</p><p>종종 방학때는 같이 유명한 피아니스트의 연주회에 갔었다.</p><p>물론 어릴때는 그때마다 저녁에 양식을 먹을 수 있어서 따라갔던 것이 크지만.. 좋은 음악을 들을 때 마다 그때의 기억이 나는 것을 보면 좋았던 모양이다.</p><p>초등학교때 많은 또래들이 그랬듯이 학원을 다니면서 피아노와 플룻을 배웠다. </p><p>정말 어릴때는 집에서 친구들과 함께 어머니께 노래를 배우기도 했었다.</p><p>근데.. 어른이 된 지금은 하나도!! 내 손가락에 남아있지 않다..ㅠㅠ</p><p>대학교 1학년때는 일렉 기타를 배워보려고 수업을 신청했었는데, 조금 만져보다가 도망갔다 ㅋㅋㅋ</p><p>아버지께서 강력히 추천하셨었지만.. 나한테는 맞지 않았던 모양이다. 손이 남들보다 작고 악력이 없어서 내 맘대로 음이 울리질 않으니 흥미가 떨어졌다.<br>(락과 같은 영역의 노래를 하나도 안듣기도 했다)</p><p>지금은 피아노를 기회가 되면 한번 더 배워보고 싶다.</p><p>내가 치고싶은 곡들만 연습해서 멋지게 연주하고 싶다.</p><p>보컬 수업도 한번 듣고 싶다. 목소리는 솔직히 자신있는데.. 노래방을 거의 안가다 시피 해서 어떻게 부르는지 모른다 ㅋㅋㅋ</p><p>이번 해에 할 수 있을까? 도전해 보자..!!</p><p><img src="https://user-images.githubusercontent.com/25416425/52431372-6fd0b080-2b4b-11e9-9bc8-ff02b6160273.jpg" width="550"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;문득 든 배우고 싶은 취미에 대한 일기&amp;gt;&lt;/p&gt;
&lt;p&gt;나는 음악을 많이 듣는 편은 아니다.&lt;/p&gt;
&lt;p&gt;기차를 타고, 버스를 타고 갈 때에도 잠을 청하기 위해 가끔 음악을 듣곤 하지만.. 아무것도 귀에 꼽지 않고 갈때가 훨씬 많다.&lt;/p&gt;
&lt;p&gt;하지만 가끔 좋은 뉴에이지 음악을 들을 때, 음색이 매력적인 기타 소리를 들을 때 나도 저렇게 연주하고 싶다는 생각은 종종 든다.&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="https://jeongwookie.github.io/newblogtest/categories/Diary/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
  </entry>
  
  <entry>
    <title>IBM Watson 다루기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/01/22/190122-AI-development-training-course-in-kaist/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/01/22/190122-AI-development-training-course-in-kaist/</id>
    <published>2019-01-22T09:22:49.000Z</published>
    <updated>2019-03-24T07:55:39.508Z</updated>
    
    <content type="html"><![CDATA[<p>12월 말 정도부터 거의 매일 학교에서 저녁에 열렸던 AI 관련 특별 강좌를 이수했다.</p><p>원래는 TensorFlow 기본을 수강하려 했는데 수강 인원이 꽉 차버려서..ㅠㅠ</p><p>예전에 왓슨을 이용해서 간단한 챗봇은 구성해본 경험이 있어서, 왓슨의 다양한 기능들을 사용해 보고 프로젝트에 써먹을 수 있는 것이 있을까 파악하는 것도 재미있어 보였다.</p><p>이 수업에서는 기본적으로 <code>IBM Watson</code>의 다양한 기능들을 사용해보고, 이를 비즈니스에 실제로 적용할 때에 구성 방식에 대해서 배웠다.</p><a id="more"></a><p>제일 처음은 Watson Assistant를 사용한 피자 배달 챗봇 만들기부터 ㅋㅋㅋ</p><p>예전에 구성했던 챗봇은 선택지를 미리 정해놓고 케이스만 나누어서 응답하는 가장 기초적인 응답 챗봇이었기 때문에, 이번에는 선택지 없이 계속 케이스를 러닝 시키면서 accuracy가 올라가도록 구성해 보았다.</p><p>이후에는 Watson Discovery 및 Watson Knowledge Studio를 사용해서 기업 내부의 아카이브 된 지식 체계들을 쉽게 검색할 수 있도록 데모를 만들어 보았고.. 여러가지 검색어를 트라이 해보면서 놀았다.</p><p>Watson의 또 하나의 서비스인 Visual Recognition도 대단히 흥미로운 툴이었다. 분류자를 직접 만들어서 내가 가지고 있는 로컬 서버의 이미지 파일들을 정돈하는 데에 수 초가 걸리지 않았다. 결과도 꽤나 정확했던.. 물론 내가 직접 찍은 사진들은 너무 local스러워서 러닝이 더 필요해 보이긴 했지만.</p><p>새로운 툴을 만져 보는 것은 언제나 즐겁다. </p><p><img src="https://user-images.githubusercontent.com/25416425/51669137-250d4f80-2007-11e9-8a51-20661af4b714.png" alt="55시간에 걸친 수업 끝!!"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;12월 말 정도부터 거의 매일 학교에서 저녁에 열렸던 AI 관련 특별 강좌를 이수했다.&lt;/p&gt;
&lt;p&gt;원래는 TensorFlow 기본을 수강하려 했는데 수강 인원이 꽉 차버려서..ㅠㅠ&lt;/p&gt;
&lt;p&gt;예전에 왓슨을 이용해서 간단한 챗봇은 구성해본 경험이 있어서, 왓슨의 다양한 기능들을 사용해 보고 프로젝트에 써먹을 수 있는 것이 있을까 파악하는 것도 재미있어 보였다.&lt;/p&gt;
&lt;p&gt;이 수업에서는 기본적으로 &lt;code&gt;IBM Watson&lt;/code&gt;의 다양한 기능들을 사용해보고, 이를 비즈니스에 실제로 적용할 때에 구성 방식에 대해서 배웠다.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="KAIST IT Program" scheme="https://jeongwookie.github.io/newblogtest/tags/KAIST-IT-Program/"/>
    
      <category term="IBM Watson" scheme="https://jeongwookie.github.io/newblogtest/tags/IBM-Watson/"/>
    
      <category term="AI" scheme="https://jeongwookie.github.io/newblogtest/tags/AI/"/>
    
      <category term="Chatbot" scheme="https://jeongwookie.github.io/newblogtest/tags/Chatbot/"/>
    
  </entry>
  
  <entry>
    <title>컴퓨터방 셀프 인테리어, 마지막</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/01/17/190117-house-remodeling-4/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/01/17/190117-house-remodeling-4/</id>
    <published>2019-01-17T12:51:53.000Z</published>
    <updated>2019-03-24T14:10:26.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="처음-시도하는-셀프-인테리어-도전기-4탄-마지막-마무리"><a href="#처음-시도하는-셀프-인테리어-도전기-4탄-마지막-마무리" class="headerlink" title="처음 시도하는 셀프 인테리어 도전기 4탄, 마지막 마무리"></a>처음 시도하는 셀프 인테리어 도전기 4탄, 마지막 마무리</h2><p>셀프 인테리어 마지막 포스트!</p><p>이전 포스트는 아래 링크를 누르면 볼 수 있다.</p><ul><li><a href="https://jeongwookie.github.io/2019/01/05/house-remodeling-1/">처음 시도하는 셀프 인테리어 도전기 1탄, 페인트 칠하기</a> </li><li><a href="https://jeongwookie.github.io/2019/01/09/house-remodeling-2/">처음 시도하는 셀프 인테리어 도전기 2탄, 바닥 깔기</a> </li><li><a href="https://jeongwookie.github.io/2019/01/12/house-remodeling-3/">처음 시도하는 셀프 인테리어 도전기 3탄, 조명 설치하기</a> </li></ul><p>이번에는 마지막에 리모델링에 사용된 비용과 출처를 정리하였으니 관심있는 초보자 분들의 많은 참고가 되었으면 한다.</p><p>우리가 리모델링한 작업을 아래에 간단히 정리해 보았다.</p><ul><li><code>방문</code> &amp; <code>굽도리</code> 화이트 톤으로 채색</li><li>블랙 문고리, 화이트 경첩으로 <code>방문</code> 깔맞춤</li><li>남는 페인트로 <code>화장실문</code> 페인팅</li><li><code>방 내부</code> 데코타일 시공 </li><li><code>방 내부</code> 레일 조명 설치</li><li><code>창문</code>에 암막 커튼 설치</li><li><code>방 벽면</code>에 Lack 설치 (예정)</li></ul><p>Lack은 컴퓨터 책상 위 벽면에 설치하려고 이케아에서 주문했는데, 막상 배치를 다 하고 나니 힘들어서 나중에 하기로 결정..ㅋㅋ</p><p>여기는 적지 않았지만, 작은 방은 벽면까지 회색 계열로 풀바른 벽지를 붙였다. 이것도 스토리가 있는데.. 결론은 보기보다 쉽지 않다는 거. 작은 방 해보고 힘들어서 큰 방은 안하기로 결정했다.</p><p>이제 결과를 공개할 시간! 가구는 솔직히 비싸서 신경을 많이 못썼다. 중간중간에 여유 되는대로 채워넣을 계획이다.</p><blockquote><p><strong>리모델링 전,후 방 비교 사진</strong></p></blockquote><div style="width:50%; height:350px; float:left;"><br><img src="https://user-images.githubusercontent.com/25416425/51427411-28858d00-1c3b-11e9-8545-de53d7447d2b.jpeg" width="350"><br></div><div style="width:50%; height:350px; float:right;"><br><img src="https://user-images.githubusercontent.com/25416425/51427443-5ff43980-1c3b-11e9-85c5-31b3b37d3f0a.jpeg" width="350"><br></div><div style="width:50%; height:350px; float:left;"><br><img src="https://user-images.githubusercontent.com/25416425/51427458-9df15d80-1c3b-11e9-8823-4d12e45198fc.jpeg" width="350"><br></div><div style="width:50%; height:350px; float:right;"><br><img src="https://user-images.githubusercontent.com/25416425/51427467-b19cc400-1c3b-11e9-8220-ea5e67201b40.jpeg" width="350"><br></div><p>이렇게 보니 침구류의 퀄리티가 좀..ㅋㅋㅋ 색상이 안맞아서 새로 깔아야겠다.</p><p>여기까지 2주 조금 넘게 걸린 것 같다. 학교에서 교육듣고 와서 밤에 틈틈히 작업한거라 오래 걸리긴 했지만 이사일까지 결국 마무리지었다.</p><p>사진으로 보니까 방이 아니라 무슨 스튜디오 같은데 ㅋㅋㅋㅋ 방송이라도 해야할 것 같군.</p><p>컴퓨터방 인테리어는 뭐니뭐니해도 모니터가 이목을 확 끄는 것 같다. 이걸 위해서 두닷 콰트로에서 제일 큰 책상을 주문했다.</p><p>모니터는 알파스캔 커브드 모델로 가운데 메인 모니터는 144hz, 측면 두개는 75hz까지 가능한 제품이다.</p><p><img src="https://user-images.githubusercontent.com/25416425/51427537-7a7ae280-1c3c-11e9-9de8-b4c13d6d46be.jpeg" width="500"></p><p>마지막으로, 리모델링 비용과 가구 구매 비용을 아래에 정리했다. </p><blockquote><p><strong>집 예산 최종 정리</strong></p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/51427895-515c5100-1c40-11e9-9a0a-f67da6ca9c3c.png" width="750"></p><p>혹시 구체적인 구매처가 궁금하시면 댓글 달아 주세요! 답 달아 드리겠습니다 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;처음-시도하는-셀프-인테리어-도전기-4탄-마지막-마무리&quot;&gt;&lt;a href=&quot;#처음-시도하는-셀프-인테리어-도전기-4탄-마지막-마무리&quot; class=&quot;headerlink&quot; title=&quot;처음 시도하는 셀프 인테리어 도전기 4탄, 마지막 마무리&quot;
      
    
    </summary>
    
      <category term="Hobby" scheme="https://jeongwookie.github.io/newblogtest/categories/Hobby/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
      <category term="Self Interior" scheme="https://jeongwookie.github.io/newblogtest/tags/Self-Interior/"/>
    
      <category term="Computer room" scheme="https://jeongwookie.github.io/newblogtest/tags/Computer-room/"/>
    
  </entry>
  
  <entry>
    <title>컴퓨터방 셀프 인테리어, 세번째</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/01/12/190112-house-remodeling-3/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/01/12/190112-house-remodeling-3/</id>
    <published>2019-01-11T15:07:03.000Z</published>
    <updated>2019-03-24T14:04:31.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="처음-시도하는-셀프-인테리어-도전기-3탄-조명-설치하기"><a href="#처음-시도하는-셀프-인테리어-도전기-3탄-조명-설치하기" class="headerlink" title="처음 시도하는 셀프 인테리어 도전기 3탄, 조명 설치하기"></a>처음 시도하는 셀프 인테리어 도전기 3탄, 조명 설치하기</h2><p>셀프 인테리어 세 번째 포스트. (1탄 포스트 <a href="https://jeongwookie.github.io/2019/01/05/house-remodeling-1/">링크</a>, 2탄 포스트 <a href="https://jeongwookie.github.io/2019/01/09/house-remodeling-2/">링크</a>)</p><p>지금까지 진행한 사항을 아래에 간단히 정리해 보면,</p><ul><li>방 두개 문 &amp; 굽도리 페인트칠 완료</li><li>방문 문고리 부착 완료</li><li>화장실 문 1/3 완료</li><li>방 두개 데코타일 시공 완료</li></ul><p>이제 남은 작업은 조명 설치와 가구 조립.</p><p>1월 8일은 그전날 바닥 작업의 여파로 쉬었습니다..ㅠㅠ (진짜 완전 힘듬)</p><a id="more"></a><h3 id="조명-설치하기"><a href="#조명-설치하기" class="headerlink" title="조명 설치하기"></a>조명 설치하기</h3><blockquote><p><strong>1월 9일 ~ 1월 10일 : 레일 조명 설치하기</strong></p></blockquote><p>역시 방 인테리어는 <strong>조명빨</strong> 아니겠는가?</p><p>패기있게 요즘 유행하는 레일조명을 LED램프로 구매했다. (대부분의 카페에서 사용하는 예쁜 조명)</p><p>LED 전구는 개당 12W의 밝기를 가지고 있으며 6개니 총 72W. 방 전체를 커버할 수 있을까 의심이 되었지만.. 하나 더 사기에는 자금이 ㅠㅠ 그래서 일단 달아보고 판단하기로 했다.</p><p>레일 조명 설치는 <a href="https://ohou.se/advices/24" target="_blank" rel="noopener">실전! 레일조명 설치해보기, 오늘의집</a> 포스트를 참고했다.</p><p>작업 순서는 대략적으로 아래와 같이 진행했다.</p><ol><li>기존 등을 조심스럽게 제거한다.</li><li>전원선의 상태를 확인하고 이를 기준으로 레일 등의 위치를 정한다.</li><li>천장에 레일을 설치한다.</li><li>레일 시작점 부분까지 전원선을 확장하여 연결한다.</li><li>레일에 조명을 달고 마무리한다.</li></ol><p>우리 집의 기존 조명은 그냥 일반적인 형광등이었다. 분해를 위해 주인아저씨께 전동 드라이버를 빌렸다.</p><p><img src="https://user-images.githubusercontent.com/25416425/51259295-2e872e00-19ef-11e9-855c-217d0103b1fe.jpg" width="350"></p><p>이걸 분해하면 전원선이 나오는데, 너무 전원선과 멀리 설치를 하면 연장선이 길어져서 보기 싫다고 한다. </p><p>그래서 적당한 거리를 두고 ㄱ자 형태로 레일 조명을 설치하기로 결정!</p><p><img src="https://user-images.githubusercontent.com/25416425/51259784-33001680-19f0-11e9-8f5e-e5c338a0261c.jpg" width="500"></p><p>초록색 선이 전원선. 떼어내니까 주변 벽지들이 제대로 도배가 안되어 있었다.. 보수 필요</p><p>근데.. 문제가 생겼다. 포스트를 보면 전원선을 길게 뽑아낼 수 있던데, <strong>저 사진에 보이는 길이가 한계였다!!</strong></p><p>전원선을 많이 연장해야 해서 다른 전선이 필요했다. 포스트에서는 기존 조명에서 전선을 떼어다가 전기테이프로 이어붙이라고 하던데.. 기존 전선의 길이들이 전부 답이 없게 짧았다 ㅠㅠ</p><p>이미 밤 11시라 주변 철물점들은 전부 문을 닫아서, 일단 놔둬놓고 레일부터 고정을 해보기로 했다.</p><p>목공용 드릴인가? 드릴이 생각보다 잘 안뚫리더라</p><p><img src="https://user-images.githubusercontent.com/25416425/51260094-d81aef00-19f0-11e9-9996-65724783d11d.jpg" width="500"></p><p>그리고 결론적으로 오늘 작업은 더이상 못하게 되었다.. </p><p>레일 조명을 설치할때, 주의할 점은 바로 <strong>천장의 상태이다.</strong> 레일이 단단히 고정되어야 하는데, 천장이 석고라면 떨어질 위험이 있어서 나무 천장에다가 박아야 한다.</p><p>근데 천장을 톡톡 치고 나무임을 확인한 후에 레일을 박으려 했는데 드릴에 문제가 있는건지 <strong>나사가 박히지 않는것이다..!!</strong> 그러다가 홧김에 다른 곳에다 드릴을 댔는데 여기는 석고였는지 구멍이 뻥 뚫렸다 으악!</p><p>얼른 실리콘으로 막아버리고 전선도 없겠다 포기 선언. 다음날 그냥 전문가를 부르기로 했다..</p><p>다음날 출장 설치 오신 <a href="https://m.blog.naver.com/nhuh11/221358036698" target="_blank" rel="noopener">한빛전기조명설비</a> 전문가님. 네이버 블로그의 후기들을 여러개 참고해서 괜찮은 분을 선택해서 전화 신청했다.</p><p>역시 전문가님! 30분이 채 걸리지 않았다.</p><p><img src="https://user-images.githubusercontent.com/25416425/51261041-e2d68380-19f2-11e9-9b2a-45abe220343f.jpg" width="500"></p><p>너무 깔끔하게 작업해주신 전문가님. 출장비는 5만원 들었다. 레일 조명은 조금 복잡한 작업이라 일반 조명보다 비싸게 받으신다고 하더라. </p><p>옆에서 보았는데, 우리가 절대 따라할 수 없는 퀄리티의 작업이었다 ㅋㅋㅋㅋ</p><p>직접 조명 설치는 실패했지만, 아무튼 조명 설치 끝! 레일 조명을 혼자 작업하고 싶다면 좋은 드릴과 예비 전선을 구비하고 시도하시길.</p><h3 id="가구-조립하기"><a href="#가구-조립하기" class="headerlink" title="가구 조립하기"></a>가구 조립하기</h3><blockquote><p><strong>1월 11일 : 책상과 선반 조립하기</strong></p></blockquote><p>전체적인 방 리폼은 끝났다. 벽지는 너무 넓고 힘들것 같아서 패스 (작은방만 작업했다)</p><p><strong>두닷 (Dodot)</strong>에서 주문한 1800 X 800 사이즈의 컴퓨터 책상이 도착했다. (두닷 콰트로 1808 아이보리 책상)</p><p><img src="https://user-images.githubusercontent.com/25416425/51265184-8c217780-19fb-11e9-9f4f-81d6d2f48108.jpg" width="500"></p><p>예전에는 1600 X 700 책상을 사용했는데, 확실히 크다. 큼지막해서 마음에 들고, 딱 봐도 엄청 튼튼해 보인다.</p><p>모니터를 여러개 놓을꺼라, 아무래도 전문가의 손길이 필요할 것 같아서 9천원을 추가해서 조립 포함하는 플랜으로 구매했었다.</p><p>그리고 동시에 도착한 일명 <strong>짭케아 철제 서랍장</strong>. 싼데는 이유가 있는듯. 조립하기 매우매우 귀찮다 ㅋㅋㅋ</p><p><img src="https://user-images.githubusercontent.com/25416425/51265568-6ba5ed00-19fc-11e9-9f67-b4ac9933b582.jpg" width="500"></p><p>일일히 서랍 하나하나를 만들어주어야 한다. 조립하는데 꽤나 애먹은 제품.</p><p>완성하고 보니 모양은 봐줄만한데, 마감이 그리 좋지는 않다.</p><blockquote><p>새로 리폼한 방의 첫 가구들</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/51266034-80cf4b80-19fd-11e9-8a3d-3211a1fc5a83.jpg" width="500"></p><p>여기에다가 침대와 책장을 놓고, 옷걸이용 행거를 설치할 예정이다.</p><p>생각보다 넓어서 아늑한 느낌은 아니지만, 약간 스튜디오 느낌이 나는 방이 될 것 같다 ㅋㅋㅋ 다음 포스트는 최종 마무리로!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;처음-시도하는-셀프-인테리어-도전기-3탄-조명-설치하기&quot;&gt;&lt;a href=&quot;#처음-시도하는-셀프-인테리어-도전기-3탄-조명-설치하기&quot; class=&quot;headerlink&quot; title=&quot;처음 시도하는 셀프 인테리어 도전기 3탄, 조명 설치하기&quot;&gt;&lt;/a&gt;처음 시도하는 셀프 인테리어 도전기 3탄, 조명 설치하기&lt;/h2&gt;&lt;p&gt;셀프 인테리어 세 번째 포스트. (1탄 포스트 &lt;a href=&quot;https://jeongwookie.github.io/2019/01/05/house-remodeling-1/&quot;&gt;링크&lt;/a&gt;, 2탄 포스트 &lt;a href=&quot;https://jeongwookie.github.io/2019/01/09/house-remodeling-2/&quot;&gt;링크&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;지금까지 진행한 사항을 아래에 간단히 정리해 보면,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;방 두개 문 &amp;amp; 굽도리 페인트칠 완료&lt;/li&gt;
&lt;li&gt;방문 문고리 부착 완료&lt;/li&gt;
&lt;li&gt;화장실 문 1/3 완료&lt;/li&gt;
&lt;li&gt;방 두개 데코타일 시공 완료&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 남은 작업은 조명 설치와 가구 조립.&lt;/p&gt;
&lt;p&gt;1월 8일은 그전날 바닥 작업의 여파로 쉬었습니다..ㅠㅠ (진짜 완전 힘듬)&lt;/p&gt;
    
    </summary>
    
      <category term="Hobby" scheme="https://jeongwookie.github.io/newblogtest/categories/Hobby/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
      <category term="Self Interior" scheme="https://jeongwookie.github.io/newblogtest/tags/Self-Interior/"/>
    
      <category term="Computer room" scheme="https://jeongwookie.github.io/newblogtest/tags/Computer-room/"/>
    
  </entry>
  
  <entry>
    <title>컴퓨터방 셀프 인테리어, 두번째</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/01/09/190109-house-remodeling-2/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/01/09/190109-house-remodeling-2/</id>
    <published>2019-01-09T11:11:00.000Z</published>
    <updated>2019-03-24T13:58:28.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="처음-시도하는-셀프-인테리어-도전기-2탄-바닥-깔기"><a href="#처음-시도하는-셀프-인테리어-도전기-2탄-바닥-깔기" class="headerlink" title="처음 시도하는 셀프 인테리어 도전기 2탄, 바닥 깔기"></a>처음 시도하는 셀프 인테리어 도전기 2탄, 바닥 깔기</h2><p>셀프 인테리어 두 번째 포스트. (1탄 포스트는 <a href="https://jeongwookie.github.io/2019/01/05/house-remodeling-1/">여기</a>)</p><p>현재 진행 상황을 간단히 정리해 보았다.</p><ul><li>방문 두개 프라이머 1회, 페인트 2회 완료</li><li>방문 문고리 부착 완료</li><li>방 두개 굽도리 프라이머 1회, 페인트 2회 완료</li><li>화장실 문 프라이머 1회 완료</li></ul><a id="more"></a><h3 id="바닥-시공하기"><a href="#바닥-시공하기" class="headerlink" title="바닥 시공하기"></a>바닥 시공하기</h3><blockquote><p><strong>1월 6일 ~ 1월 7일 : 바닥 데코타일 시공하기</strong></p></blockquote><p>그 다음 우리의 목표는 바닥이다.</p><p>현재 바닥은 시멘트 바닥 위에 장판이 깔려 있는 형태.</p><p>장판을 뜯는 것은 집주인이 혀용하지 않았고, 만약 새로 바닥을 깔고 싶으면 깔아도 되긴 하는데 다시 뗄 수 있도록 제한적으로 허용했다.</p><p>그래서 우리가 생각한 것은 <strong>본드를 사용하지 않는 점착식 데코타일.</strong></p><p>데코타일이란 것이 원래 일반 가정집에 시공하는 것은 아니라고 한다.</p><p>그런데, 셀프 인테리어 붐이 일면서 적당히 가정집 바닥에도 붙일 수 있게 변형된 형태가 등장했고, 이것이 바로 점착식 데코타일. 두께에 따라서 종류가 있는데, 그냥 기본인 2t짜리로 주문했다.</p><p>색상은 조금 차분한 인상의 방을 만들기 위해 어두운 나무톤의 로즈우드 색을 선택.</p><p><img src="https://user-images.githubusercontent.com/25416425/50968502-a0a6d100-151e-11e9-81a1-e0ee3fe46e6b.png" width="500"></p><p>아참, 주문 할때 페인트와 똑같이 <strong>몇 개의 데코타일을 주문할 것인지</strong> 의문이 들 것이다. 다행히 <a href="https://smartstore.naver.com/hanalivingdeco/products/100898667?NaPm=ct%3Djqj1sszu%7Cci%3Dcheckout%7Ctr%3Dppc%7Ctrx%3D%7Chk%3D4d47bdc26f9c0772a945e52f2c4e1f0f6b109880" target="_blank" rel="noopener">하나리빙데코 구매 사이트</a>에 접속하면 대략 몇 제곱 미터에 얼마의 데코타일이 드는지 나와있다. 내 방 (W480 x D400) 기준으로 약 11개 조금 넘는 박스가 필요했다. (1박스 당 11장)</p><p>이제 데코타일을 붙이기 시작! 붙이는 방법은 <a href="https://www.ggumim.co.kr/star/view/1184" target="_blank" rel="noopener">이승훈 님의 집꾸미기 포스트</a> 와 <a href="https://youtu.be/HN7eKRdJJCo" target="_blank" rel="noopener">나르의 인테리어 TV</a>를 참고했다.</p><p>전체적인 작업 순서는 아래와 같이 진행했다.</p><ol><li>방의 4면 중 기준이 되는 면 &amp; 모서리를 정한다.</li><li>데코타일을 가로 &amp; 세로로 방이 꽉 차도록 늘어놓아 본다.</li><li>대략적인 시공 시 필요 갯수를 확인하고, 1/4 크기의 타일과 1/2 크기의 타일을 잘라서 만든다. (1/4 크기로 무늬 만들기)</li><li>마구마구 붙인다!</li><li>남은 부분 + 틈새를 작은 타일을 만들어 보수한다.</li></ol><p>붙이는 건 할만한데, 자르는게 너무 어렵다..</p><p><img src="https://user-images.githubusercontent.com/25416425/50969133-bae1ae80-1520-11e9-8236-0903a25b8c35.jpeg" width="500"></p><p>1차적으로 다 붙이면서 느낀 문제점들이 있다.</p><p>첫째, 둘이서 작업할 때 한명은 위에서부터, 한명은 사이드 벽면에서부터 붙여 나갔는데 나중에 만나는 지점을 보니 붙일 수 있는 면적이 모자라거나 남는 부분이 생겼다. 보수하기 위해서 다시 다 떼고 붙이고를 반복했다..ㅠㅠ</p><p>둘째, 기준으로 삼은 벽면에서부터 출발해서 반대쪽 벽면까지 붙여나가는데 마지막 장판의 크기가 뒤죽박죽이었다. 이걸 일일히 사이즈를 재고 칼로 잘라서 붙였는데 마감이 안좋기도 하고 무엇보다도 <strong>매우매우 힘들다!!!</strong></p><p>붙여가다보면 끝부분이 계단 모양으로 나오는데, 각각 모양이 달라서 일일히 제단해야한다..ㅜㅜ</p><p><img src="https://user-images.githubusercontent.com/25416425/50969460-e749fa80-1521-11e9-8d9e-c30a7ba2d518.jpeg" width="500"></p><p>솔직히 말해서 그냥 쭉 붙이는 건 즐거웠는데, 끝 부분 재단하고 붙이는데 그냥 포기하고 싶었다 ㅠㅠㅠㅠ</p><p>1차로 한번 쭉 붙이는데 약 1시간 30분, 끝 부분 재단하고 붙이는 데 <strong>약 3시간 이상 걸렸다.</strong></p><p>중간에 힘들고 배고프고 그래서 페인트와 쓰레기 더미들 사이에서 라면을 끓여먹었다..ㅋㅋㅋ</p><p><img src="https://user-images.githubusercontent.com/25416425/51258630-bd934680-19ed-11e9-8841-9030990eddf7.jpg" width="500"></p><p>페인트 칠은 즐겁지만 바닥에 데코타일 까는 건 다시 한번 고민해 보길 강력히 추천한다.. </p><p>허리 휘어질 것 같아서 새벽 5시 반에 작업 끝나고 방 들어와서 파스 붙이고 자고 그랬으니.</p><blockquote><p>노력의 결실 데코타일 바닥 시공 완료</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50969645-80791100-1522-11e9-8fdc-397beb7377b7.jpeg" width="500"></p><p>아무튼 바닥까지 끝!! <a href="https://jeongwookie.github.io/2019/01/12/house-remodeling-3/">다음 포스팅</a>은 조명과 남은 인테리어로 돌아오겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;처음-시도하는-셀프-인테리어-도전기-2탄-바닥-깔기&quot;&gt;&lt;a href=&quot;#처음-시도하는-셀프-인테리어-도전기-2탄-바닥-깔기&quot; class=&quot;headerlink&quot; title=&quot;처음 시도하는 셀프 인테리어 도전기 2탄, 바닥 깔기&quot;&gt;&lt;/a&gt;처음 시도하는 셀프 인테리어 도전기 2탄, 바닥 깔기&lt;/h2&gt;&lt;p&gt;셀프 인테리어 두 번째 포스트. (1탄 포스트는 &lt;a href=&quot;https://jeongwookie.github.io/2019/01/05/house-remodeling-1/&quot;&gt;여기&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;현재 진행 상황을 간단히 정리해 보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;방문 두개 프라이머 1회, 페인트 2회 완료&lt;/li&gt;
&lt;li&gt;방문 문고리 부착 완료&lt;/li&gt;
&lt;li&gt;방 두개 굽도리 프라이머 1회, 페인트 2회 완료&lt;/li&gt;
&lt;li&gt;화장실 문 프라이머 1회 완료&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hobby" scheme="https://jeongwookie.github.io/newblogtest/categories/Hobby/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
      <category term="Self Interior" scheme="https://jeongwookie.github.io/newblogtest/tags/Self-Interior/"/>
    
      <category term="Computer room" scheme="https://jeongwookie.github.io/newblogtest/tags/Computer-room/"/>
    
  </entry>
  
  <entry>
    <title>컴퓨터방 셀프 인테리어, 첫번째</title>
    <link href="https://jeongwookie.github.io/newblogtest/2019/01/05/190105-house-remodeling-1/"/>
    <id>https://jeongwookie.github.io/newblogtest/2019/01/05/190105-house-remodeling-1/</id>
    <published>2019-01-05T12:34:22.000Z</published>
    <updated>2019-03-24T13:50:11.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="처음-시도하는-셀프-인테리어-도전기-1탄-페인트-칠하기"><a href="#처음-시도하는-셀프-인테리어-도전기-1탄-페인트-칠하기" class="headerlink" title="처음 시도하는 셀프 인테리어 도전기 1탄, 페인트 칠하기"></a>처음 시도하는 셀프 인테리어 도전기 1탄, 페인트 칠하기</h2><p>인터넷 커뮤니티 클리앙에 올라온 <a href="https://www.clien.net/service/board/use/12810598" target="_blank" rel="noopener">혼자서 한 컴퓨터방 리모델링</a>을 보고 느낌이 와서 계획한 <u>투룸 리모델링.</u></p><p>현재 살고 있는 집은 1.5룸인데 친구랑 둘이 살기 너무 좁아서 1년만 채우고 투룸으로 이사가기로 했었다.</p><p>이왕 이사가는 김에 얼마나 살지는 모르겠지만 인테리어 한번 해볼까? 하고 시작 ㅋㅋㅋ 심지어 집 구할때도 제일 큰 조건 중 하나가 “이집 뜯어고쳐도 돼요?” 였다..</p><p>우리는 컴퓨터쟁이니까 방은 컴퓨터방 리모델링 사진들을 많이 참고했고, 원래는 가구 배치나 여러가지 인테리어 소품들도 막 살펴봤지만 예산이..ㅠㅠ</p><p>1주일에 걸쳐서 총 15번 이상 각각 다른 투룸들을 방문하면서 좋은 물건(?)을 물색했고, 12월 30일 큰방 + 작은방 + 분리 주방 + 베란다 2개 형태의 방으로 확정지었다.</p><ul><li>방 스펙 : W480 x D400 x h207 (m)</li><li>우리 스펙 : 인테리어 경험 전무, 27세 남자 두명</li><li>1차 결정 사항 : 문 페인트칠, 바닥 시공, 조명 교체, 커튼 설치</li></ul><a id="more"></a><h3 id="페인트-결정하기"><a href="#페인트-결정하기" class="headerlink" title="페인트 결정하기"></a>페인트 결정하기</h3><blockquote><p><strong>12월 31일 :  벤자민 무어에서 페인트와 프라이머 구매</strong></p></blockquote><p>다음날 곧바로 대전 둔산동에 위치한 <a href="http://www.benjaminmoore.co.kr/" target="_blank" rel="noopener">벤자민 무어 (Benjamin Moore)</a> 페인트 샾에 다녀왔다.</p><div style="width:50%; height:350px; float:left;"><br><img src="https://user-images.githubusercontent.com/25416425/50962721-4140c500-150e-11e9-9c45-1cd23fdf5b47.jpeg" width="350"><br></div><div style="width:50%; height:350px; float:right;"><br><img src="https://user-images.githubusercontent.com/25416425/50962759-51f13b00-150e-11e9-8d25-8df1b499be38.jpeg" width="350"><br></div><p>원래 방문 전에는 <a href="https://www.ggumim.co.kr/star/view/1184" target="_blank" rel="noopener">이분</a>을 참고해서 총 3가지 색상을 구매하려 했는데, 생각보다 가격이 비싸서 그냥 하나로만 칠하기로 결정.</p><p>우리가 정한 색상은 <strong>클라우드 화이트 (Cloud White)</strong> 이다. 이걸로 문을 칠하고, 굽도리도 칠하기로 했다.</p><p>벽지도 원래는 떼어내고 투톤으로 칠하려 했는데, 돈이 무지막지하게 많이 들어서 포기..ㅠㅠ</p><p>페인트 1 갤런, 프라이머 2 리터, 롤러 외 기타 페인트 용도의 물품들 구매에 약 <strong>18만원</strong> 정도 소비되었다. (최종 포스트에서 총 사용한 비용을 표로 정리할 계획이니 참고)</p><p><img src="https://user-images.githubusercontent.com/25416425/50963331-c4164f80-150f-11e9-9e05-9a58136ae2ad.jpeg" width="500"></p><p>구매한 페인트 제품은 내구성이 강한 <em>SCUFF-X</em> 모델이다.</p><p>참고로, <strong>프라이머 (Primer)</strong>는 페인트를 칠하기 전, 이미 도색된 곳에 발라서 원래의 색을 묻는 역할을 한다. 다른 말로 젯소 (Gesso)라고도 한다. 색칠 전에 흰색 계열로 바탕을 칠해준다고 생각하면 될듯? 프라이머에 대해 자세히 알고 싶다면 <a href="https://ohou.se/advices/1953" target="_blank" rel="noopener">여기</a>를 참고하자.</p><p>또한, 페인트를 구매하기 전 제일 고민되는게 <strong>“페인트를 얼마나 사야하지??”</strong> 였다.</p><p>처음에는 인터넷으로 페인트를 구매하려 했기 때문에 수량을 미리 알아야 했고, <a href="https://ohou.se/advices/10" target="_blank" rel="noopener">오늘의 집: 페인트 양 계산하기</a>를 주로 읽었다. 그래도 감이 안잡혀서 오프라인 매장을 방문하기로 결정했는데, 정답이었다. </p><p>대충 수치만 알아가도 벤자민 무어의 엄청난 고객 응대 서비스에 감탄하면서 고개를 끄덕이며 페인트를 들고 나올 수 있다고 확신한다. 받아본 적은 없지만, 비싼 양복점에서 맞춤 정장을 사는 기분이었다.</p><p><em>벤자민 무어 페인트 : 극상의 오프라인 고객 응대, 냄새가 전혀 나지 않는 친환경 페인트, 수많은 후기가 증명하는 페인트 색감의 우월함</em></p><h3 id="프라이머-칠하기"><a href="#프라이머-칠하기" class="headerlink" title="프라이머 칠하기"></a>프라이머 칠하기</h3><blockquote><p><strong>1월 1일 ~ 1월 2일 : 방문 프라이머 칠하기</strong></p></blockquote><p>우리가 정한 집의 가장 큰 문제가 방문이다.</p><p>문고리는 쭈글쭈글하고, 경첩은 녹이 슬어 있었으며, 무엇보다도 방문의 색깔이 너무 촌스러웠다.</p><p><img src="https://user-images.githubusercontent.com/25416425/50964639-2755b100-1513-11e9-98e6-f8eac9fb58e4.jpeg" width="350"></p><p>작업 순서는 아래와 같이 진행했다.</p><ol><li>방문 손잡이 제거</li><li>물티슈로 더러운 얼룩 닦아내기</li><li>마른 걸레로 먼지 제거</li><li>마스킹 테이프로 방문 틀과 아래쪽 마킹</li><li>프라이머 도색</li></ol><p><img src="https://user-images.githubusercontent.com/25416425/50964950-f6c24700-1513-11e9-8b0f-2a37e7e992fc.jpeg" width="500"></p><p>슥슥 칠해주면 된다! 원래 저렇게 얼룩덜룩 하더라고..</p><p>하루 칠해보고 안 사실이 있다.</p><ul><li>잘 칠하려면 처음에는 작은 붓으로 사이사이 테두리를 그려야 한다는 것</li><li>넓은 면은 무조건 롤러를 사용해야 한다는 것</li><li>살살 해도 바닥에 많이 튄다는거.. 물론 옷에도 ㅠㅠ</li></ul><p>세가지 모두 다 칠하고 나서 안 사실이다 ㅋㅋㅋㅋ 처음 문은 망함 ㅋㅋㅋㅋㅋ 바닥도 엉망 ㅋㅋㅋㅋㅋㅋ</p><blockquote><p>바닥에 급하게 종이 깔고 1회차 프라이머 완성한 문</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50965276-e3fc4200-1514-11e9-9783-ff3e5ae048fa.jpeg" width="500"></p><p>그래도 처음으로 붓칠 하면서 느낀 점은.. <strong>생각보다 재밌다?!</strong></p><p>새로운 취미가 생긴 기분이다. 물론 바닥에 튄 프라이머 긁어낸다고 고생하긴 했지만 ㅋㅋ</p><p>다음날은 작업복으로 갈아입고 굽도리 제대로 칠했다!</p><p><img src="https://user-images.githubusercontent.com/25416425/50965640-e0b58600-1515-11e9-95e2-5984e949f213.jpeg" width="500"></p><h3 id="페인트-칠하기"><a href="#페인트-칠하기" class="headerlink" title="페인트 칠하기"></a>페인트 칠하기</h3><blockquote><p><strong>1월 3일 ~ 1월 4일 : 방문 페인트 칠하기</strong></p></blockquote><p>위에서 언급한 대로, 우리가 정한 방 문 색상은 <a href="https://www.benjaminmoore.com/en-us/color-overview/find-your-color/color/967/cloud-white?color=967" target="_blank" rel="noopener">Cloud White</a>이다.</p><p>프라이머가 잘 마른 것을 확인하고 <strong>1회차 페인트 칠</strong>, 그리고 그 다음날 다시 와서 <strong>2회차 페인트 칠</strong>을 진행했다.</p><blockquote><p>1회차 페인트칠이 끝난 방문</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50965921-c16b2880-1516-11e9-95bf-b76c5ed5814b.jpeg" width="500"></p><blockquote><p>2회차 페인트칠 후. 이제 좀 느낌이 나지 않는가?</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50966022-0b540e80-1517-11e9-8c99-bbc2fdd44d14.jpeg" width="350"></p><h3 id="굽돌이-및-기타-작업하기"><a href="#굽돌이-및-기타-작업하기" class="headerlink" title="굽돌이 및 기타 작업하기"></a>굽돌이 및 기타 작업하기</h3><blockquote><p><strong>1월 5일 : 굽도리 페인트 칠하기 &amp; 방문 손잡이 달기</strong></p></blockquote><p>그 다음날은 방 전체 굽도리 페인트 칠을 진행했다.</p><p>여기서 중요한건, 페인트칠이 아니라 <u>각 부분에 마스킹 테이프가 꼼꼼하게 붙여져 있어야 한다는 것이다.</u></p><p>천장과 바닥에 붙인 마스킹 테이프를 다시 보수해 주고, 작업 시작!</p><p><img src="https://user-images.githubusercontent.com/25416425/50966316-eca24780-1517-11e9-8429-e24078ca2164.jpeg" width="500"></p><p>한창 작업하느라 더러워진 방. 하지만 다시 태어난 방문을 보면 기분이 좋아졌다.</p><p>문고리는 셀프 인테리어 물품 판매 사이트중에서 유명한 <a href="http://www.moongori.com/main/index" target="_blank" rel="noopener">문고리닷컴</a>에서 제일 인기 많은 블랙 색상의 문고리를 부착했다.</p><p>페인트칠 완료된 하얀 문과 검은 문고리. 완벽해</p><p><img src="https://user-images.githubusercontent.com/25416425/50966599-c03afb00-1518-11e9-83fc-2e87978d0483.jpeg" width="350"></p><p>흰색 경첩도 달아야 완벽한데, 아직 전동 드릴이 없어서 그대로 놔두었다.</p><p>한 4일 정도 걸려서 <strong>양쪽 방문 &amp; 굽도리 페인팅</strong>을 끝냈다.</p><p>수업도 가고 일도 하는 와중에 밤에 와서 조금씩 작업을 한 탓에 좀 오래 걸리긴 했지만 만족!</p><p><a href="https://jeongwookie.github.io/2019/01/09/house-remodeling-2/">다음 포스트</a>는 바닥 깔기로 찾아오겠습니다..ㅎㅎ</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;처음-시도하는-셀프-인테리어-도전기-1탄-페인트-칠하기&quot;&gt;&lt;a href=&quot;#처음-시도하는-셀프-인테리어-도전기-1탄-페인트-칠하기&quot; class=&quot;headerlink&quot; title=&quot;처음 시도하는 셀프 인테리어 도전기 1탄, 페인트 칠하기&quot;&gt;&lt;/a&gt;처음 시도하는 셀프 인테리어 도전기 1탄, 페인트 칠하기&lt;/h2&gt;&lt;p&gt;인터넷 커뮤니티 클리앙에 올라온 &lt;a href=&quot;https://www.clien.net/service/board/use/12810598&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;혼자서 한 컴퓨터방 리모델링&lt;/a&gt;을 보고 느낌이 와서 계획한 &lt;u&gt;투룸 리모델링.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;현재 살고 있는 집은 1.5룸인데 친구랑 둘이 살기 너무 좁아서 1년만 채우고 투룸으로 이사가기로 했었다.&lt;/p&gt;
&lt;p&gt;이왕 이사가는 김에 얼마나 살지는 모르겠지만 인테리어 한번 해볼까? 하고 시작 ㅋㅋㅋ 심지어 집 구할때도 제일 큰 조건 중 하나가 “이집 뜯어고쳐도 돼요?” 였다..&lt;/p&gt;
&lt;p&gt;우리는 컴퓨터쟁이니까 방은 컴퓨터방 리모델링 사진들을 많이 참고했고, 원래는 가구 배치나 여러가지 인테리어 소품들도 막 살펴봤지만 예산이..ㅠㅠ&lt;/p&gt;
&lt;p&gt;1주일에 걸쳐서 총 15번 이상 각각 다른 투룸들을 방문하면서 좋은 물건(?)을 물색했고, 12월 30일 큰방 + 작은방 + 분리 주방 + 베란다 2개 형태의 방으로 확정지었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;방 스펙 : W480 x D400 x h207 (m)&lt;/li&gt;
&lt;li&gt;우리 스펙 : 인테리어 경험 전무, 27세 남자 두명&lt;/li&gt;
&lt;li&gt;1차 결정 사항 : 문 페인트칠, 바닥 시공, 조명 교체, 커튼 설치&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hobby" scheme="https://jeongwookie.github.io/newblogtest/categories/Hobby/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
      <category term="Self Interior" scheme="https://jeongwookie.github.io/newblogtest/tags/Self-Interior/"/>
    
      <category term="Computer room" scheme="https://jeongwookie.github.io/newblogtest/tags/Computer-room/"/>
    
  </entry>
  
  <entry>
    <title>사진으로 보는 나의 2018년</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/12/31/181231-looking-back-on-2018/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/12/31/181231-looking-back-on-2018/</id>
    <published>2018-12-31T13:52:26.000Z</published>
    <updated>2019-03-24T11:36:36.385Z</updated>
    
    <content type="html"><![CDATA[<p>2018년 한해가 벌써 끝났다..</p><p>아쉬운 일이 많았던 올해. 나는 무엇을 했을까?</p><a id="more"></a><h3 id="January"><a href="#January" class="headerlink" title="January"></a>January</h3><p>12월까지의 창업 활동을 마무리하고, 새로운 기회가 있는지 찾아다녔다. </p><p>블록체인 컨퍼런스에도 몇번 참여했고, 투자자분이 주선한 비즈니스 미팅도 수회 진행했었다. 조금 마음이 조급했던 시기였지.. </p><blockquote><p>강남 팁스타운에서 열렸던 블록체인 컨퍼런스 참여 후</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52056910-ed724a80-25a6-11e9-82b7-f6a056d683ba.JPG" width="500"></p><blockquote><p>강남역 한복판에서 살았던 시절의 내방. 쉐어하우스에서 6개월을 살았다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562093-60906300-0d54-11e9-88ef-2b19608ccfb9.JPG" width="500"></p><blockquote><p>샌드폭스 사무실! 이제는 없음 ㅠㅠ 여기서 참 많은 일이 있었는데.. 아쉽다</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52056981-2a3e4180-25a7-11e9-9f16-da1cc78154ab.JPG" width="500"></p><h3 id="Febuary"><a href="#Febuary" class="headerlink" title="Febuary"></a>Febuary</h3><p>우여곡절 끝에 GIST를 무사히 졸업했다. </p><p>지도교수님과 공동 지도교수님의 도움을 크게 받았다.. 그분들께는 정말 감사한 마음 뿐이다. </p><p>설에는 가족들과 괌을 다녀왔다. 리프레쉬의 기간이었던 것 같다.</p><blockquote><p>여기 어딘가 앉아있었지. 지금 보니까 감회가 새롭구만</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52057524-92415780-25a8-11e9-8d14-d4b4e246c90b.JPG" width="500"></p><blockquote><p>오랜만에 미국 느낌 물씬 나는 곳에 와서 더 좋았다..ㅋㅋ 옛날생각 난다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52057340-1b0bc380-25a8-11e9-97b8-5db17fae4d20.JPG" width="500"></p><blockquote><p>해변가 축제 한가운데서 시원한 맥주 한잔</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52057439-5908e780-25a8-11e9-9c31-54bd0f8ba71d.JPG" width="500"></p><h3 id="March"><a href="#March" class="headerlink" title="March"></a>March</h3><p>KAIST 기술경영학부 대학원에 입학을 했고, 대전에 슬슬 적응하면서 학교 수업을 들었다.</p><p>한창 사업한다고 서울에서 뛰어다니다가 오랜만에 강의실에 앉아서 수업을 들으니까 기분이 이상해 ㅋㅋㅋ</p><blockquote><p>오리일까 거위일까? 교내에 당당히 걸어다녀서 자주 보인다. 보다보면 힐링됨</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562287-17d9a980-0d56-11e9-8baa-2be7e88c17d4.JPG" width="500"></p><blockquote><p>고급경영통계학 강의실인데 수업 시작하면 여기가 앉을 자리가 없을 정도로 꽉 찬다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52057791-55c22b80-25a9-11e9-8720-dab6f3d2d5d6.JPG" width="500"></p><h3 id="April"><a href="#April" class="headerlink" title="April"></a>April</h3><p>여러 고민 끝에 모 기업과 우리 팀의 협업을 결정했다. </p><p>3층 스타트업 오피스 시절.</p><blockquote><p>아무도 없는 주말에 살짝 찍은 스타트업 스튜디오</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562309-4d7e9280-0d56-11e9-9bdc-842cdd992425.JPG" width="500"></p><h3 id="May"><a href="#May" class="headerlink" title="May"></a>May</h3><p>후쿠오카, 가고시마 등 총 두번의 일본 여행을 다녀왔다. </p><p>한창 바쁠 시기였는데 둘다 뜬금포로 막 3~4일 전에 결정해서 그 주 주말에 날치기로 다녀온..</p><blockquote><p>가고시마, 사쿠라지마 섬에서 서울대 다니는 친구와 ㅋㅋㅋ</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562358-a6e6c180-0d56-11e9-825f-27f663ee1350.JPG" width="500"></p><h3 id="June"><a href="#June" class="headerlink" title="June"></a>June</h3><p>한창 학교 오피스에서 일했다. 기말고사 시즌에다가 맡은 일도 많아서 여러가지로 힘들었다. </p><p>학기 끝나자마자 팀 워크샵을 다녀왔다.</p><blockquote><p>6월 막바지 워크샾에서</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562385-ced62500-0d56-11e9-9cfc-52cc1c7eaeac.JPG" width="500"></p><h3 id="July"><a href="#July" class="headerlink" title="July"></a>July</h3><p>카이스트 전산학부 출신의 새로운 친구와 같이 일하게 되었다. </p><p>중간에는 예전에 행사할 때 사놨던 항공편이 있어서 ㅋㅋㅋ 다카마쓰를 다녀왔다.</p><blockquote><p>네이버 콜로퀴움에서 팀원들과 함께!!</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562403-01801d80-0d57-11e9-89d3-dc3d353cd32a.JPG" width="500"></p><blockquote><p>나오지마 섬.. 참 좋았지</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562430-31c7bc00-0d57-11e9-8033-f2c71389ebfb.JPG" width="500"></p><blockquote><p>사누키우동의 발상지가 바로 여기! 일일 우동학교에서 우동 삶는 법을 배웠다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/52058076-11835b00-25aa-11e9-8c00-f51c3a05c916.JPG" width="500"></p><h3 id="August"><a href="#August" class="headerlink" title="August"></a>August</h3><p>본격적으로 개발에 착수하게 되었는데.. 중간에 삐걱거림이 있었지. </p><p>원격으로 일하는 게 이렇게 힘들다니.. 여러가지로 생각이 많이 드는 시기였다.</p><p>창업은 역시 사람이 제일 문제구나.. 이런거?</p><blockquote><p>한창 2층 우리 사무실에서 토론할때. 밤도 새고 난리였다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562450-5b80e300-0d57-11e9-8840-00de38f62bf8.JPG" width="500"></p><h3 id="September"><a href="#September" class="headerlink" title="September"></a>September</h3><p>새학기가 시작되었고, 학교에서 파이썬 교육을 들었다. </p><p>답답해서 나도 개발을 시작해야겠다는 생각이 강하게 들었다. </p><p>앞으로 어떤 방향으로 삶을 설계해야 할지 많은 고민이 있었던 시기.. 너무 걱정을 많이해서 그런가 또 몸이 안좋아졌었다 ㅠㅠ </p><p>하나 좋은 기억이 있다면 새로운 비젼을 가진 사람들을 만났다는거?</p><blockquote><p>카이스트 E5 창업 프로그램 발표 참석. 오랜만에 프레쉬한 이야기들을 많이 들어서 좋았다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562485-8bc88180-0d57-11e9-9792-29fffa54c1df.JPG" width="500"></p><h3 id="October"><a href="#October" class="headerlink" title="October"></a>October</h3><p>원격으로 협업하는 것에 대해서 진지하게 고민했다. </p><p>협업 관련하여 여러 툴을 도입하게 되었고 여러 번의 미팅을 진행했다. </p><p>중간에 나고야를 잠깐 다녀왔다.</p><blockquote><p>성수 패스트파이브에서 팀 회의할때 살짝 찍은 사진</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562539-dfd36600-0d57-11e9-816a-c32df00b1c80.JPG" width="500"></p><blockquote><p>아름다운 가을의 나고야</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562518-c03c3d80-0d57-11e9-8819-26834c8dadf8.JPG" width="500"></p><h3 id="November"><a href="#November" class="headerlink" title="November"></a>November</h3><p>주로 현장에서 고객 스터디를 진행했고, 서로의 스타일을 확인하게 되었다.</p><blockquote><p>서울에서 미팅 후 팀원들과 함께 피맥!</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562549-009bbb80-0d58-11e9-8391-89905eeb1569.JPG" width="500"></p><blockquote><p>강남역 고객 스터디.. 이틀동안 계속 앉아서 인터뷰한다고 목 나가는 줄 알았다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562556-098c8d00-0d58-11e9-99ab-feff50f58fbd.jpg" width="500"></p><h3 id="December"><a href="#December" class="headerlink" title="December"></a>December</h3><p>헤어짐이 있었고, 또 한편 아이템을 바꾸고 좌충우돌 하는 시간이 있었다.</p><blockquote><p>초기 제품 만들려고 쌩고생 하던 시절. 지금은 다른 아이템을 하고 있지만.. 나름 신선한 경험이었다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/25416425/50562618-a2bba380-0d58-11e9-9786-e7fd0bd1795e.JPG" width="500"></p><p>돌이켜 보면, 이리저리 많이 움직이고 여러 경험을 하였지만 막상 결과물은 탐탁치 않은 해였던 것 같다.</p><p>나의 불안함을 여기저기 움직이는 걸로 어떻게든 무마하려 했었다.</p><p><strong>19년은 내면을 탄탄히 하는 해, 그리고 그 열매를 맺을 수 있는 해가 될 수 있도록 노력하자.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018년 한해가 벌써 끝났다..&lt;/p&gt;
&lt;p&gt;아쉬운 일이 많았던 올해. 나는 무엇을 했을까?&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="https://jeongwookie.github.io/newblogtest/categories/Diary/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
  </entry>
  
  <entry>
    <title>파이썬으로 함수 다루기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/20/180920-function-in-python/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/20/180920-function-in-python/</id>
    <published>2018-09-19T15:25:57.000Z</published>
    <updated>2019-03-24T10:53:57.431Z</updated>
    
    <content type="html"><![CDATA[<p><strong>함수 (Function)</strong>가 무엇인지는 우리 모두 알고 있다.</p><p>함수를 사용하는 이유가 무엇일까?</p><p>기본적으로 프로그래머란 종족들은 귀찮음을 최소화 하고 어떻게든 꿀(?)을 빨려고 한다.</p><p>중복되는 코드는 절대 작성하지 않는다는 뜻.</p><p>반복되는 부분이 있을 경우, 이를 그룹화 하여 <strong>함수</strong>로 만들고, 나중에 또 쓰고 싶을 때 한줄로 해결해 버린다.</p><p>결과적으로 코드의 양이 줄어들겠지?</p><p>이러한 <strong>함수화</strong>는 프로그램의 흐름을 명확하게 하는 순기능이 있다.</p><p><img src="https://user-images.githubusercontent.com/25416425/45764003-ad03d700-bc6c-11e8-8922-ad9146df440d.png" width="500"></p><a id="more"></a><p>이제 우리의 본분으로 돌아가서, 파이썬에서의 함수 사용 방법을 알아보자.</p><p>함수의 구조는 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 함수이름<span class="params">(매개변수)</span>:</span></span><br><span class="line">    &lt;수행할 문장&gt;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 결과값</span><br></pre></td></tr></table></figure><p>근데 이렇게 보면 감이 잘 안오니까 예시를 실행 해 보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span>    <span class="comment"># 함수 이름은 sum이고 매개변수는 a와 b</span></span><br><span class="line">    result = a + b </span><br><span class="line">    <span class="keyword">return</span> result   <span class="comment"># 결과값 result 반환</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = sum(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(value)</span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_2 = sum(a=<span class="number">3</span>, b=<span class="number">7</span>)   <span class="comment"># 매개변수 지정</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(value_2)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>함수를 작성할 때 위와 같은 방법이 정석이지만, 매개변수 자리를 비워 놓거나 return 값 지정을 안해줘도 돌아간다.</p><p>그런데, 입력값이 몇 개가 될지 모를 때는 어떻게 해야 할까?</p><p>위의 예제는 매개변수가 a와 b이므로 입력값이 2개로 지정되어 있는데..</p><p>파이썬에서는 <strong>“*”을 이용한다.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*args)</span>:</span>    <span class="comment"># args는 임의의 변수명</span></span><br><span class="line">       sum = <span class="number">0</span> </span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> args:   <span class="comment"># 여러 개 입력 시 tuple로 들어감</span></span><br><span class="line">           sum = sum + i </span><br><span class="line">       <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p>위의 예시처럼 변수명에 *을 붙이면 여러 개를 입력할 수 있게 된다.</p><p>지금까지는 함수의 입력값에 초점을 두었다면, 이제부터는 <strong>return</strong>에 대해서 알아보자.</p><p><u>파이썬에서 함수의 결과값은 언제나 하나이다.</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_sub</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">a</span>+<span class="title">b</span>    # 여기서 함수가 종료됨</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">a</span>-<span class="title">b</span>    </span></span><br><span class="line"><span class="function"></span></span><br><span class="line">&gt;&gt;&gt; result = sum_sub(3,2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>즉, 함수는 <strong>return문을 만나는 순간</strong> 결과값을 반환하고 종료된다.</p><p>return의 이러한 성질을 사용해서 다른 방법으로 응용이 가능하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_my_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">"제 이름은 &#123;&#125; 입니다."</span>.format(name))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>say_my_name(<span class="string">"김정욱"</span>)</span><br><span class="line">제 이름은 김정욱 입니다.</span><br></pre></td></tr></table></figure><p>이처럼 return을 단독으로 쓰면 <u>함수를 즉시 빠져나갈 수 있다.</u></p><p>이번에는 조금 다른 형태의 입력값을 알아보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_myself</span><span class="params">(name, old, man=True)</span>:</span> </span><br><span class="line">    print(<span class="string">"제 이름은 &#123;&#125; 입니다."</span>.format(name)) </span><br><span class="line">    print(<span class="string">"나이는 &#123;&#125; 살 입니다."</span>.format(old)) </span><br><span class="line">    <span class="keyword">if</span> man: </span><br><span class="line">        print(<span class="string">"남자입니다."</span>)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        print(<span class="string">"여자입니다."</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(say_myself(<span class="string">"김정욱"</span>, <span class="number">26</span>))</span><br><span class="line">제 이름은 김정욱 입니다.</span><br><span class="line">나이는 <span class="number">26</span> 살 입니다.</span><br><span class="line">남자입니다.</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(say_myself(<span class="string">"김정욱"</span>, <span class="number">26</span>, <span class="literal">True</span>))</span><br><span class="line">제 이름은 김정욱 입니다.</span><br><span class="line">나이는 <span class="number">26</span> 살 입니다.</span><br><span class="line">남자입니다.   <span class="comment"># 위와 동일한 출력값</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; print(say_myself(<span class="string">"이하린"</span>, <span class="number">20</span>, <span class="literal">False</span>))</span><br><span class="line">제 이름은 이하린 입니다.</span><br><span class="line">나이는 <span class="number">20</span> 살 입니다.</span><br><span class="line">여자입니다.   <span class="comment"># 매개변수 False 출력값</span></span><br></pre></td></tr></table></figure><p><strong>man=True</strong>와 같이 매개변수에 미리 값을 넣어준 경우, 따로 입력하지 않아도 자동으로 True값으로 고정된다.</p><p>그래서 두 가지 결과값이 동일하게 출력된 것이다.</p><p>man 변수에 False 값이 전달된 경우, if-else문에 의하여 출력값이 바뀌었음을 확인할 수 있다.</p><p>마지막으로, 함수 사용 시 주의할 점을 소개한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = a +<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>자칫 하다가는 결과값이 2라고 착각할 수 있다. 왜 이럴까?</p><p>함수 밖의 변수와 함수 안의 변수가 a로 이름이 똑같아서 혼란을 발생시킨 것이다.</p><p>함수 안의 매개변수는 함수 안에서만 사용되는 <strong>함수만의 변수</strong> 임에 유의하자.</p><p>그냥 global 변수와 이름을 구별되게 지으면 문제는 해결된다..</p><p>수업 시간에 강사님께서 매우 강조하셨다.</p><p>함수는!</p><p>한 가지를 해야 한다.</p><p>그 한 가지를 잘 해야 한다.</p><p><strong>그 한 가지만을 해야 한다.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;함수 (Function)&lt;/strong&gt;가 무엇인지는 우리 모두 알고 있다.&lt;/p&gt;
&lt;p&gt;함수를 사용하는 이유가 무엇일까?&lt;/p&gt;
&lt;p&gt;기본적으로 프로그래머란 종족들은 귀찮음을 최소화 하고 어떻게든 꿀(?)을 빨려고 한다.&lt;/p&gt;
&lt;p&gt;중복되는 코드는 절대 작성하지 않는다는 뜻.&lt;/p&gt;
&lt;p&gt;반복되는 부분이 있을 경우, 이를 그룹화 하여 &lt;strong&gt;함수&lt;/strong&gt;로 만들고, 나중에 또 쓰고 싶을 때 한줄로 해결해 버린다.&lt;/p&gt;
&lt;p&gt;결과적으로 코드의 양이 줄어들겠지?&lt;/p&gt;
&lt;p&gt;이러한 &lt;strong&gt;함수화&lt;/strong&gt;는 프로그램의 흐름을 명확하게 하는 순기능이 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25416425/45764003-ad03d700-bc6c-11e8-8922-ad9146df440d.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://jeongwookie.github.io/newblogtest/tags/Python/"/>
    
      <category term="KAIST IT Program" scheme="https://jeongwookie.github.io/newblogtest/tags/KAIST-IT-Program/"/>
    
  </entry>
  
  <entry>
    <title>서비스의 시장 크기 제시하기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/18/180918-customer-discovery-kaist-e5/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/18/180918-customer-discovery-kaist-e5/</id>
    <published>2018-09-18T13:59:02.000Z</published>
    <updated>2019-03-24T11:10:13.432Z</updated>
    
    <content type="html"><![CDATA[<p>아닛..!! 저번주에 참여했던 KAIST E5 에서 놀랍게도 상금을 받으면서 2차 미션 대상팀이 되었다.</p><p>아무래도 주제가 좋지 않았나 싶다. 아직 많이 부족하지만..</p><p>아무튼 그래서 오늘은 2차 Mission 인 <strong>Customer Discovery</strong> 강의를 들으러 KAIST 스타트업 스튜디오 1층으로 모였다.</p><p>저번 비즈니스 모델링은 카카오벤처스 <strong>김기준 상무님</strong>께서 강연해 주셨고, 이번에는 씨엔티테크 <strong>전화성 대표님</strong>께서 직접 방문하셨다.</p><p><img src="https://user-images.githubusercontent.com/25416425/45695810-2c29da00-bb9d-11e8-9742-5bf801e04b03.png" width="550"></p><a id="more"></a><p>이번 2차 미션의 목표는, 1차 캠프에서 설계한 <u>우리의 비즈니스 모델이 정말 시장에서 통하는지</u> 그 가설을 검증하는 것이다.</p><p>대표님께서 처음 강연 시작 전, <strong>시장</strong>에 관하여 짧고 굵게 정의하셨는데 대단히 인상깊다.</p><blockquote><p>시장, 길게 설명할 것 없어. 나한테 돈을 주는 사람들의 집합이지.</p></blockquote><p>고객을 발견하는 일련의 과정은, 결국 내가 제시한 해결책이 효과적임을 입증하는 수단이다.</p><p>이를 세 가지 프로세스로 요약할 수 있다.</p><ol><li><p>진짜 공감되는 문제인가? (마켓의 문제를 입증하기)</p></li><li><p>내가 제시한 솔루션이 효과적인가?</p></li><li><p>1번과 2번의 결과를 보았을 때, 내가 뛰어들 마켓의 사이즈는 이정도다!</p></li></ol><p>그러면 구체적으로 위와 같은 의문을 어떻게 해결해야 할까?</p><p>답은 <strong>내가 돈 받을 사람한테 직접 가서 알아보는 수 밖에 없다!</strong></p><p>무엇이 힘든지, 얼마나 힘든지, 내가 이런 서비스를 만들껀데 어떤 기능이 당신에게 큰 도움이 될지 등 고객과의 <strong>Deep interwiew</strong>를 진행해야 한다.</p><p><strong>시장 규모 추정</strong>은 사업 계획서에 반드시 들어가는 항목이다.</p><p>그런데 의문이 들지 않는가?</p><p>내가 생각하는 서비스는 새로운 건데, 시장을 도데체 어떻게 숫자로 표현하라는 거지?</p><p>이를 제시하기 위한 유명한 툴이 있긴 하다.</p><p><img src="https://user-images.githubusercontent.com/25416425/45697168-21247900-bba0-11e8-9d33-6eedcc608687.jpg" alt="TAM-SAM-SOM Approach"></p><p>TAM (Total Addressable Market)은 한국말로 <strong>전체 시장</strong>이다. 제품 및 서비스와 관련된 전체 시장의 규모를 뜻한다.</p><p>예를 들어, 모바일 APP의 경우, 국내 스마트폰 사용자 전체 <strong>4000만명</strong>이 전체 시장 규모일 수 있겠다.</p><p>SAM (Service Available Market)은 한국말로 <strong>유효 시장</strong>이다. </p><p>우리 서비스가 추구하는 비즈니스 모델이 있는 영역만을 타겟팅 한 것인데,</p><p>예를 들어 모바일 헬스케어 스타트업인 경우, 자료를 보니 전체 사용자 중 1/4가 모바일 헬스케어를 이용한다고 나와 있으므로 <strong>1000만명</strong>이다.</p><p>제일 중요한건 SOM (Serviceable Obtainable Market)인데 한국말로 <strong>수익 시장</strong>이다.</p><p>쉽게 말하면 유효 시장 안에서 우리 서비스가 초기에 노릴 수 있는 고객이 몇명인가? 에 대한 답변이다.</p><blockquote><p>누가 너의 초기 서비스에 재화를 지불할 것인가?</p></blockquote><p>위의 시장 규모 추정법에 대해 자세히 알고 싶은 사람은 <a href="https://verticalplatform.kr/archives/5494" target="_blank" rel="noopener">여기</a>를 참고하자.</p><p>나에게 대단히 도움을 많이 주고 계신 로아인벤션랩의 김진영 대표님께서 운영하시는 스타트업 관련 정보 플랫폼이다.</p><p>딱 보면 알겠지만, 결국 <strong>수익 시장을 어떻게 잡느냐</strong>가 초기 스타트업의 성패를 좌우하게 된다.</p><p>그런데, 말이 쉽지 이걸 특정하기는 대단히 어렵다..</p><p>이 때, 괜히 없는 자료 뒤적거리지 말고 사무실 밖으로 나가보면 어떨까. (어짜피 새로운 시도를 할꺼라면 자료가 없을 꺼다)</p><p><img src="https://user-images.githubusercontent.com/25416425/45697776-7f9e2700-bba1-11e8-8ab3-c94d3049883d.jpg" alt="니가 찾는 사실은 사무실에 없으니까 제발 밖에 좀 나가라!"></p><p>이 말씀을 하신 분이 바로 <a href="https://www.slideshare.net/MatthewLee/case-study-51449865" target="_blank" rel="noopener">Lean Startup</a>의 창시자, <strong>Steve Blank</strong> 선생님 되시겠다.</p><p>고객을 특정 지으려면, 먼저 고객을 만나서 <strong>진짜 그들이 겪는 문제</strong>를 들어봐야 한다.</p><p>그러니까 사업계획서에 수익 시장을 적어 넣으려면 고객을 만나야 한다는 거다.</p><p>전화성 대표님께서 말씀해 주신 프로세스가 있다. (그리고 이것이 2차 Mission 발표일에 꼭 들어가야 한다!)</p><ol><li><p>누구한테 팔껀지 가정을 하고, 그 고객한테 찾아간다.</p></li><li><p>내가 설정한 “문제”를 실제로 그들이 심각하게 겪고 있는지 검증한다.</p></li><li><p>내가 설계한 “해결책”을 제시하고, <strong>돈을 지불할 의향이 있는지 물어본다.</strong></p></li></ol><p>2번 단계에서 많은 초기 스타트업 팀은, 그들이 생각하기에 <strong>심각한 문제</strong> 였던 것이 실제로는 별 거 아님을 깨닫는다.</p><p>이 때, 내가 생각하기에 방향이 두가지 정도 있는 것 같은데</p><p>첫 번째는 이들한테 인터뷰를 하면서 <strong>진짜 심각한 문제</strong>를 새로 캐치해 내는 것.</p><p>두 번째는 내가 설정한 <strong>심각한 문제</strong>를 겪을 만한 고객을 다시 물색하는 것.</p><p>두 가지 다 해볼만 하다. 빨리빨리 움직여 봐야 할 것이다.</p><p>또 하나, 3번 단계에서 조금 주의해야 할 사항이 있다.</p><p><img src="https://user-images.githubusercontent.com/25416425/45698810-d60c6500-bba3-11e8-8db4-e44e8f324db1.jpg" alt="환하게 웃고 계신 우리동네 음악대장님. 그런데 속마음은 어떨까? 흠"></p><p>고객들은 속마음을 이야기하지 않는다.</p><p>특히, 열심히 자신의 사업에 대해 이야기하는 사람을 앞에 두고 <strong>아 정말 쓸모없네요</strong> 라고 말하는 사람이 과연 몇이나 될까?</p><p>게다가 아는 사람들한테 물어보면 더 그렇다.</p><p>인터뷰도 스킬이다. 고객을 끄덕이는 것은 우리가 원하는 반응이 아니다.</p><p><strong>진짜 매력도를 느끼는 기능이 무엇인지</strong> 캐내야 한다.</p><p>지금 단계에서 고객들이 이야기하는 “괜찮네요” 가 당신한테 그 서비스를 구매하기 위해 돈을 지불하겠다는 것과 다름을 염두에 두자.</p><p><u>사람들의 지갑에서 돈을 꺼내는 건 진짜로 힘든 일이다.</u></p><p>여기서 스티브 잡스 (Steve Jobs) 의 이야기를 꺼내는 사람들이 있을 수 있겠다.</p><p>잡스 형님께서 당당하게 하신 말씀.</p><blockquote><p>나는 아이폰 만들때 시장 조사를 하지 않았다. 고객들은 자신들이 원하는 게 뭔질 모르니까.</p></blockquote><p>요점은 아이폰을 만들 때 자신의 <strong>직관</strong>에 의존하였다는 것인데..</p><p>직관에 의존할 만큼 당신은, 당신이 만들 서비스가 속한 영역에 경험치가 쌓여 있는가?</p><p>스티브 잡스는 컴퓨터를 작게 만드는 데 <u>평생을 미쳐 있었다.</u></p><p>25년동안 쌓은 경험들이 그의 직관을 구성했고, 이는 보통 사람들의 생각을 아득히 뛰어넘은 것이었다.</p><p>실제로 그 사이에 애플은 많은 삽질을 했다. </p><p>그들이 만든 애플 컴퓨터는 소수의 매니아층을 만족시킬 뿐이었고, 과도한 카리스마식 경영을 하다 결국 자신이 만든 회사에서 쫓겨나기까지 하는 수모를 겪은 그다.</p><p>이 정도 경험치로 이루어진 직관에게 시장 조사 결과가 별 건가?</p><p>전화성 대표님깨서 한 마디 하셨다.</p><p><strong>“경험치를 그 정도 쌓은 분야에서 사업을 하던가, 아니면 시간을 가지고 시장 조사를 해”</strong></p><p>실제로 서비스를 오픈에서 시장에 뛰어들면, 수많은 예측하지 못했던 문제들이 튀어나온다.</p><p>그렇다면, 사업 시작 전에 충분히 주의해서 막을 수 있는 문제들은 막아야 하지 않을까?</p><p><strong>치밀하고 날카롭게 사업 하자.</strong></p><p>P.S 전화성 대표님도 <strong>운동</strong>을 대단히 강조하셨다. 사업할려면 인내심이 엄청나게 필요한데 키우는 방법은 오직 운동 뿐이라고. 열심히 하자!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;아닛..!! 저번주에 참여했던 KAIST E5 에서 놀랍게도 상금을 받으면서 2차 미션 대상팀이 되었다.&lt;/p&gt;
&lt;p&gt;아무래도 주제가 좋지 않았나 싶다. 아직 많이 부족하지만..&lt;/p&gt;
&lt;p&gt;아무튼 그래서 오늘은 2차 Mission 인 &lt;strong&gt;Customer Discovery&lt;/strong&gt; 강의를 들으러 KAIST 스타트업 스튜디오 1층으로 모였다.&lt;/p&gt;
&lt;p&gt;저번 비즈니스 모델링은 카카오벤처스 &lt;strong&gt;김기준 상무님&lt;/strong&gt;께서 강연해 주셨고, 이번에는 씨엔티테크 &lt;strong&gt;전화성 대표님&lt;/strong&gt;께서 직접 방문하셨다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25416425/45695810-2c29da00-bb9d-11e8-9742-5bf801e04b03.png&quot; width=&quot;550&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Startup Story" scheme="https://jeongwookie.github.io/newblogtest/categories/Startup-Story/"/>
    
    
      <category term="Startup" scheme="https://jeongwookie.github.io/newblogtest/tags/Startup/"/>
    
      <category term="Business" scheme="https://jeongwookie.github.io/newblogtest/tags/Business/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 카테고리 이름 설정 시 문제</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/13/180913-category-name-problem/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/13/180913-category-name-problem/</id>
    <published>2018-09-12T17:01:42.000Z</published>
    <updated>2019-03-24T10:54:26.427Z</updated>
    
    <content type="html"><![CDATA[<p>새벽에 왠 고생이냐…</p><p>블로그 글을 정리하고 있는데, 갑자기 페이지 로딩이 안됐다.</p><p><img src="https://user-images.githubusercontent.com/25416425/45441549-432e7f00-b6fa-11e8-9625-ffdb1c67e6d6.jpg" width="500"></p><p>짜증을 뒤로 하고, 얼른 해결책부터 찾으려고 하는데 놀라운 점을 발견했다.</p><a id="more"></a><ol><li><p>카테고리 이름이 <strong>Python</strong>, <strong>Growth Hacking</strong>인 곳은 누르면 에러 발생</p></li><li><p>카테고리 이름이 <strong>Diary</strong>, <strong>Github</strong>인 곳은 문제 없이 작동</p></li></ol><p>아니 이게 무슨 상황이란 말인가?</p><p>모두 다 작동이 안된다면 뭔가 directing 문제가 발생했거니와.. 헤더 파일이나 설정 파일을 볼껀데</p><p>이건 되고 저건 안되니 어이가 없더라.</p><p>페이지 관리 도구에 들어가서 페이지 에러를 확인했더니 이런 메세지가 뜬다.</p><blockquote><p>Refused to load the font ‘<url>‘ because it violates the following Content Security Policy directive…</url></p></blockquote><blockquote><p>“default-src ‘none’”. Note that ‘font-src’ was not explicitly set, so ‘default-src’ is used as a fallback.</p></blockquote><p>뭐라고? <strong>Content Security Policy</strong> 라는 걸 어겨서 로딩이 거부되는 거라고?</p><p><img src="https://user-images.githubusercontent.com/25416425/45442114-12e7e000-b6fc-11e8-8fe1-768f1b77cf3d.jpg" alt="아직 아무것도 안했는데 벌써 뭔가를 어겼다고? ㅠㅠ"></p><p>처음에는 폰트가 어쩌구.. 하길래 폰트 로딩이 안됐나 하고 <strong>head.ejs</strong> 파일 살펴보고, <strong>_variables.styl</strong> 이랑 <strong>_config.yml</strong> 설정 파일 계속 들여다보고 이것 저것 고쳐봤는데 안됐다.</p><p>그런데 느낌이 쎄했다. 혹시 Security Policy라 그러니까 카테고리 이름에 hacking이 들어가서 블럭을 당한게 아닐까?</p><p>바로 “Growth Hacking” 이라는 카테고리 이름을  <strong>그로스 해킹</strong> 이라고 바꿨더니.. <strong>됐다?!</strong></p><p>그렇다면 “Python”도 모종의 이유로 블럭을 당했다고 판단, <strong>파이썬</strong>으로 고쳐 적었더니 정상 작동한다.</p><p><strong>결론 : 카테고리 이름에 “Hacking” 이나 “Python” 을 적으면 안된다</strong></p><p>흠.. 정확한 이유는 잘 모르겠다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;새벽에 왠 고생이냐…&lt;/p&gt;
&lt;p&gt;블로그 글을 정리하고 있는데, 갑자기 페이지 로딩이 안됐다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25416425/45441549-432e7f00-b6fa-11e8-9625-ffdb1c67e6d6.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;짜증을 뒤로 하고, 얼른 해결책부터 찾으려고 하는데 놀라운 점을 발견했다.&lt;/p&gt;
    
    </summary>
    
      <category term="Blog setting" scheme="https://jeongwookie.github.io/newblogtest/categories/Blog-setting/"/>
    
    
      <category term="Github" scheme="https://jeongwookie.github.io/newblogtest/tags/Github/"/>
    
      <category term="Error" scheme="https://jeongwookie.github.io/newblogtest/tags/Error/"/>
    
      <category term="Hexo" scheme="https://jeongwookie.github.io/newblogtest/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Format 함수로 정렬하기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/11/180911-code-alignment-using-format-function/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/11/180911-code-alignment-using-format-function/</id>
    <published>2018-09-11T14:38:47.000Z</published>
    <updated>2019-03-24T08:27:18.919Z</updated>
    
    <content type="html"><![CDATA[<p>첫 번째 시간에 배운 <strong>Format 함수</strong>로 정렬(Alignment)을 할 수 있다.</p><p>주로 출력물을 보기 좋게 정렬하고 싶을 때 많이 사용한다고 한다.</p><table><thead><tr><th>Code</th><th>Feature</th></tr></thead><tbody><tr><td>{:k&gt;10}</td><td>10칸 공간, <strong>오른쪽 정렬</strong>, 공백을 k로 채우기</td></tr><tr><td>{:k&lt;10}</td><td>10칸 공간, <strong>왼쪽 정렬</strong>, 공백을 k로 채우기</td></tr><tr><td>{:k^10}</td><td>10칸 공간, <strong>가운데 정렬</strong>, 공백을 k로 채우기</td></tr></tbody></table><a id="more"></a><p>아래의 예시 코드를 보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10칸 공간, 2칸에 Hi 넣고 나머지는 공백, 왼쪽 정렬</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:&lt;10&#125; Jeongwook"</span>.format(<span class="string">"Hi"</span>))</span><br><span class="line">Hi         Jeongwook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10칸 공간, 2칸에 Hi 넣고 나머지는 공백, 오른쪽 정렬</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:&gt;10&#125; Jeongwook"</span>.format(<span class="string">"Hi"</span>))</span><br><span class="line">        Hi Jeongwook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10칸 공간, 2칸에 Hi 넣고 나머지는 공백, 가운데 정렬</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:^10&#125; Jeongwook"</span>.format(<span class="string">"Hi"</span>))</span><br><span class="line">    Hi     Jeongwook</span><br></pre></td></tr></table></figure><p>&lt;는 왼쪽 정렬, &gt;은 오른쪽 정렬, ^은 가운데 정렬임을 기억하자.</p><p>콜론(:) 바로 뒤에 채우고 싶은 문자나 숫자를 입력하면 된다.</p><p>아래와 같이 print 함수로 출력할때 예쁘게 구분하기 위해 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 20칸 공간, 5칸에 Hello 넣고 나머지는 =으로 채움, 가운데 정렬</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:=^20&#125;"</span>.format(<span class="string">"Hello"</span>))</span><br><span class="line">=======Hello========</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;첫 번째 시간에 배운 &lt;strong&gt;Format 함수&lt;/strong&gt;로 정렬(Alignment)을 할 수 있다.&lt;/p&gt;
&lt;p&gt;주로 출력물을 보기 좋게 정렬하고 싶을 때 많이 사용한다고 한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;{:k&amp;gt;10}&lt;/td&gt;
&lt;td&gt;10칸 공간, &lt;strong&gt;오른쪽 정렬&lt;/strong&gt;, 공백을 k로 채우기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{:k&amp;lt;10}&lt;/td&gt;
&lt;td&gt;10칸 공간, &lt;strong&gt;왼쪽 정렬&lt;/strong&gt;, 공백을 k로 채우기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{:k^10}&lt;/td&gt;
&lt;td&gt;10칸 공간, &lt;strong&gt;가운데 정렬&lt;/strong&gt;, 공백을 k로 채우기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://jeongwookie.github.io/newblogtest/tags/Python/"/>
    
      <category term="KAIST IT Program" scheme="https://jeongwookie.github.io/newblogtest/tags/KAIST-IT-Program/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 강의 첫번째 숙제</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/11/180911-first-homework-python/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/11/180911-first-homework-python/</id>
    <published>2018-09-11T08:27:10.000Z</published>
    <updated>2019-03-24T10:46:51.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1번-문제-슬라이싱-및-문자열-합치기"><a href="#1번-문제-슬라이싱-및-문자열-합치기" class="headerlink" title="1번 문제 : 슬라이싱 및 문자열 합치기"></a>1번 문제 : 슬라이싱 및 문자열 합치기</h3><p>첫 번째 문제는 주어진 string을 “슬라이싱” 및 “문자열 합치기”를 사용해서 주어진 format으로 만드는 것이다.</p><p>“20180108”을 “2018년 01월 08일”로 바꾸어 출력해 보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"20180108"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year = a[:<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>month = a[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date = a[<span class="number">6</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date_format = <span class="string">"&#123;&#125;년 &#123;&#125;월 &#123;&#125;일"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(date_format.format(year, month, date))</span><br><span class="line"><span class="number">2018</span>년 <span class="number">01</span>월 <span class="number">08</span>일</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2번-문제-나누기-및-나머지-구하기를-활용한-1번-문제-풀이"><a href="#2번-문제-나누기-및-나머지-구하기를-활용한-1번-문제-풀이" class="headerlink" title="2번 문제 : 나누기 및 나머지 구하기를 활용한 1번 문제 풀이"></a>2번 문제 : 나누기 및 나머지 구하기를 활용한 1번 문제 풀이</h3><p>두 번째 문제는 1번 문제와 동일한 결과물을 “나누기” 및 “나머지 구하기”를 활용하여 출력하는 것이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">20180108</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year = int(a/<span class="number">10000</span>)     <span class="comment">#int로 정수화</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>month = int((a%<span class="number">10000</span>)/<span class="number">100</span>)      <span class="comment">#int로 정수화</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date = (a%<span class="number">10000</span>)%<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;0&#125;년 &#123;3&#125;&#123;1&#125;월 &#123;3&#125;&#123;2&#125;일"</span>.format(year, month, date, <span class="number">0</span>))</span><br><span class="line"><span class="number">2018</span>년 <span class="number">01</span>월 <span class="number">08</span>일</span><br></pre></td></tr></table></figure><p>다른 방법도 있을텐데 그냥 0 자리를 만들고 그대로 format 함수 사용해서 채워넣었다.</p><h3 id="3번-문제-슬라이싱-및-문자열-합치기"><a href="#3번-문제-슬라이싱-및-문자열-합치기" class="headerlink" title="3번 문제 : 슬라이싱 및 문자열 합치기"></a>3번 문제 : 슬라이싱 및 문자열 합치기</h3><p>세 번째 문제는 주어진 문자열의 문자를 “슬라이싱” 및 “문자열 합치기”를 활용하여 바꾸는 것이다.</p><p>“Hi Jeongwook” 을 “Hello Jeongwook” 으로 바꾸어 보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"Hi Jeongwook"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>say_hello = <span class="string">"Hello "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result_statement = say_hello + b[<span class="number">3</span>:]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result_statement)</span><br><span class="line"><span class="string">"Hello Jeongwook"</span></span><br></pre></td></tr></table></figure><h3 id="4번-문제-원하는-문자를-Upper-letter로-바꾸어-보기"><a href="#4번-문제-원하는-문자를-Upper-letter로-바꾸어-보기" class="headerlink" title="4번 문제 : 원하는 문자를 Upper letter로 바꾸어 보기"></a>4번 문제 : 원하는 문자를 Upper letter로 바꾸어 보기</h3><p>네 번째 문제는 문자열을 입력 받은 후 첫 번째 문자와 마지막 문자만 대문자로 바꾸어 출력하는 것이다.</p><p>입력 받은 문자열을 슬라이싱 후 원하는 부분만 <a href="https://www.tutorialspoint.com/python/string_upper.htm" target="_blank" rel="noopener">upper()</a>을 적용한 후 다시 합치면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>input_statement = input()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>first_letter = input_statement[<span class="number">0</span>].upper()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>last_letter = input_statement[<span class="number">-1</span>].upper()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>middle_letter = input_statement[<span class="number">1</span>:<span class="number">-1</span>].lower()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output_statement = first_letter + middle_letter + last_letter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(output_statement)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1번-문제-슬라이싱-및-문자열-합치기&quot;&gt;&lt;a href=&quot;#1번-문제-슬라이싱-및-문자열-합치기&quot; class=&quot;headerlink&quot; title=&quot;1번 문제 : 슬라이싱 및 문자열 합치기&quot;&gt;&lt;/a&gt;1번 문제 : 슬라이싱 및 문자열 합치기&lt;/h3&gt;&lt;p&gt;첫 번째 문제는 주어진 string을 “슬라이싱” 및 “문자열 합치기”를 사용해서 주어진 format으로 만드는 것이다.&lt;/p&gt;
&lt;p&gt;“20180108”을 “2018년 01월 08일”로 바꾸어 출력해 보자.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;string&quot;&gt;&quot;20180108&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;year = a[:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;month = a[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date = a[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date_format = &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#125;년 &amp;#123;&amp;#125;월 &amp;#123;&amp;#125;일&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(date_format.format(year, month, date))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;년 &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;월 &lt;span class=&quot;number&quot;&gt;08&lt;/span&gt;일&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://jeongwookie.github.io/newblogtest/tags/Python/"/>
    
      <category term="KAIST IT Program" scheme="https://jeongwookie.github.io/newblogtest/tags/KAIST-IT-Program/"/>
    
  </entry>
  
  <entry>
    <title>문자열 자료형 다루기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/10/180910-common-string-operation/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/10/180910-common-string-operation/</id>
    <published>2018-09-10T14:30:06.000Z</published>
    <updated>2019-03-24T08:14:04.894Z</updated>
    
    <content type="html"><![CDATA[<p>첫번째 강의 시간에 배운 내용 중 주목해야 할 점은 <strong>format</strong>의 쓰임이었다.</p><p>예전에 C로 코딩할때는 %d, %f 등을 잘 찍어줘야 하는데, 파이썬은 그런게 없어도 잘되네?</p><p>기본적인 포맷은 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</span><br></pre></td></tr></table></figure><p>이렇게 치면 결과값이 “one two”로 나온다. (string)</p><p>내가 앞에서 순서를 지정할 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</span><br></pre></td></tr></table></figure><p>결과값은 “two one” 이다.</p><p>자세한 내용은 <a href="https://pyformat.info/" target="_blank" rel="noopener">PyFormat</a>에서 확인할 수 있다.</p><p>이외에도 주로 <strong>문자열 자료형</strong>에 대해서 다루었다. 내용을 간단히 열거하면 아래와 같다.</p><a id="more"></a><h4 id="문자열-더하기-및-곱하기"><a href="#문자열-더하기-및-곱하기" class="headerlink" title="문자열 더하기 및 곱하기"></a>문자열 더하기 및 곱하기</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"I love "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"Python!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a+b)</span><br><span class="line"><span class="string">"I love Python!"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"="</span> * <span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"Python is god"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"="</span> * <span class="number">20</span>)</span><br><span class="line">====================</span><br><span class="line"><span class="string">"Python is god"</span></span><br><span class="line">====================</span><br></pre></td></tr></table></figure><h4 id="문자열-인덱싱"><a href="#문자열-인덱싱" class="headerlink" title="문자열 인덱싱"></a><strong>문자열 인덱싱</strong></h4><p>문자열 인덱싱이란, 말그대로 문자열에서 문자들에게 순서를 숫자로 매기는(indexing) 것이다.<br><strong>“파이썬은 0부터 숫자를 센다”</strong> 라는 사실만 주의하자.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">0</span>]</span><br><span class="line"><span class="string">'P'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">3</span>]</span><br><span class="line"><span class="string">'h'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'n'</span></span><br></pre></td></tr></table></figure></p><h4 id="문자열-슬라이싱"><a href="#문자열-슬라이싱" class="headerlink" title="문자열 슬라이싱"></a><strong>문자열 슬라이싱</strong></h4><p>문자열 슬라이싱이란, 주어진 문자열을 자르는 (slicing) 것이다. 내가 원하는 만큼 범위를 지정하면 딱 그만큼 잘라서 준다. 단, 범위를 지정할 때 <strong>끝은 포함하지 않음</strong>에 주의하자.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python is king"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line"><span class="string">'Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">7</span>:]</span><br><span class="line"><span class="string">' is king'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[:]</span><br><span class="line"><span class="string">'Python is king'</span></span><br></pre></td></tr></table></figure></p><p>문자열 슬라이싱은 주어진 문자열을 수정하고 싶을 때 유용하게 사용할 수 있다.<br>문자열의 요소값은 바꿀 수 있는 값이 아니기 때문에 (immutable: 불변의) 문자열 슬라이싱 후 더하는 방법을 사용한다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 예시: "Pithon" 을 "Python"으로 바꾸고 싶다!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"Pithon"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">1</span>]</span><br><span class="line"><span class="string">'P'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:]</span><br><span class="line"><span class="string">'thon'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">1</span>] + <span class="string">'y'</span> + a[<span class="number">2</span>:]</span><br><span class="line"><span class="string">'Python'</span></span><br></pre></td></tr></table></figure></p><h4 id="문자열-관련-함수들"><a href="#문자열-관련-함수들" class="headerlink" title="문자열 관련 함수들"></a><strong>문자열 관련 함수들</strong></h4><p>자주 쓰이는 함수는, </p><ul><li><a href="https://www.programiz.com/python-programming/methods/string/find" target="_blank" rel="noopener">find</a> (인덱스 알려주기)</li><li><a href="https://www.programiz.com/python-programming/methods/string/strip" target="_blank" rel="noopener">strip</a> (공백 지우기)</li><li><a href="https://www.programiz.com/python-programming/methods/string/replace" target="_blank" rel="noopener">replace</a> (문자열 바꾸기)</li><li><a href="https://www.programiz.com/python-programming/methods/string/split" target="_blank" rel="noopener">split</a> (문자열 나누기)</li></ul><p>등이 있다.</p><p>자세한 내용은 <a href="https://wikidocs.net/13#_11" target="_blank" rel="noopener">점프투 파이썬 위키</a>를 참고하자.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;첫번째 강의 시간에 배운 내용 중 주목해야 할 점은 &lt;strong&gt;format&lt;/strong&gt;의 쓰임이었다.&lt;/p&gt;
&lt;p&gt;예전에 C로 코딩할때는 %d, %f 등을 잘 찍어줘야 하는데, 파이썬은 그런게 없어도 잘되네?&lt;/p&gt;
&lt;p&gt;기본적인 포맷은 아래와 같다.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125; &amp;#123;&amp;#125;&#39;&lt;/span&gt;.format(&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;two&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이렇게 치면 결과값이 “one two”로 나온다. (string)&lt;/p&gt;
&lt;p&gt;내가 앞에서 순서를 지정할 수도 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;1&amp;#125; &amp;#123;0&amp;#125;&#39;&lt;/span&gt;.format(&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;two&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;결과값은 “two one” 이다.&lt;/p&gt;
&lt;p&gt;자세한 내용은 &lt;a href=&quot;https://pyformat.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyFormat&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이외에도 주로 &lt;strong&gt;문자열 자료형&lt;/strong&gt;에 대해서 다루었다. 내용을 간단히 열거하면 아래와 같다.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://jeongwookie.github.io/newblogtest/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://jeongwookie.github.io/newblogtest/tags/Python/"/>
    
      <category term="KAIST IT Program" scheme="https://jeongwookie.github.io/newblogtest/tags/KAIST-IT-Program/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 블로그에 이미지 업로드하기</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/09/10/180910-github-blog-image-upload/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/09/10/180910-github-blog-image-upload/</id>
    <published>2018-09-10T13:46:48.000Z</published>
    <updated>2019-03-24T10:43:41.310Z</updated>
    
    <content type="html"><![CDATA[<p>Github를 사용해서 블로그를 시작하려는데, 문제가 생겼다.</p><blockquote><p>왜 이미지 업로드가 안되지?</p></blockquote><p>분명히 source를 확인하고, deploy_git에 정상적으로 image가 업로드 되었음에도, 내 페이지는 그대로..</p><p>이것저것 해보다가 다시 블로그를 새로고침했더니, 정상적으로 image가 올라가 있었다 -_-</p><a id="more"></a><p>내 짧은 지식과 검색으로 다음과 같은 결론을 얻었다.</p><ol><li>Github를 이용해서 블로그를 호스팅할 경우, 전송 속도가 매우 느려서 업로드 되는데 시간이 좀 걸린다. (약 3~4분)</li><li>되긴 되지만 답답하다. 다른 방법 없나?</li></ol><p>구글링을 열심히 해보니, 놀랍게도 GitHub Help에서 issue로 등록해 놨더라.</p><p><a href="https://help.github.com/articles/file-attachments-on-issues-and-pull-requests/" title="깃허브 페이지에 이미지 업로드하기" target="_blank" rel="noopener">File attachments on issues and pull requests</a></p><p><img src="https://user-images.githubusercontent.com/25416425/45302205-a5964c80-b54d-11e8-8acb-170bf3e854f7.gif" alt="네모에다가 원하는 이미지를 드래그 앤 드랍 해보자"></p><p>위에 나와있는 움짤처럼 이미지를 끌어다가 네모에 넣고 기다리면, 이미지 링크가 생긴다.</p><p>이를 원하는 페이지에 붙여넣으면 끝!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github를 사용해서 블로그를 시작하려는데, 문제가 생겼다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;왜 이미지 업로드가 안되지?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;분명히 source를 확인하고, deploy_git에 정상적으로 image가 업로드 되었음에도, 내 페이지는 그대로..&lt;/p&gt;
&lt;p&gt;이것저것 해보다가 다시 블로그를 새로고침했더니, 정상적으로 image가 올라가 있었다 -_-&lt;/p&gt;
    
    </summary>
    
      <category term="Blog setting" scheme="https://jeongwookie.github.io/newblogtest/categories/Blog-setting/"/>
    
    
      <category term="Github" scheme="https://jeongwookie.github.io/newblogtest/tags/Github/"/>
    
      <category term="Error" scheme="https://jeongwookie.github.io/newblogtest/tags/Error/"/>
    
      <category term="Hexo" scheme="https://jeongwookie.github.io/newblogtest/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>중요한 미팅을 다녀와서</title>
    <link href="https://jeongwookie.github.io/newblogtest/2018/03/27/180327-after-meeting/"/>
    <id>https://jeongwookie.github.io/newblogtest/2018/03/27/180327-after-meeting/</id>
    <published>2018-03-27T13:10:11.000Z</published>
    <updated>2019-03-24T07:52:51.489Z</updated>
    
    <content type="html"><![CDATA[<p>어제는 밤을 꼬박 새고 아침 일찍 강남에 도착했다.</p><p>11시 선릉 미팅에 점심 식사 하고, 4시에 을지로 미팅, 그리고 저녁 7시까지 대전 복귀해서 수업 들어가는 매우 강행군 스케줄;;</p><p>그래도 오랜만에 움직이는 거라 정신 바짝 차리고 임했다.</p><p>여러 가지 이슈가 새로 생겨서 앞으로 더 바빠질 것 같다.</p><p>나름 깨달은 사실이 있다면,</p><ol><li><p>내가 여러 사람 앞에서 피칭하는 것은 자신이 있어도 1:1로 설명은 잘 못한다는 것</p></li><li><p>짧게 보고해야 하는 자리인데도 미괄식으로 자꾸 말을 한다는 것</p></li></ol><p>두 가지 모두 앞으로 고쳐나가야겠다…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;어제는 밤을 꼬박 새고 아침 일찍 강남에 도착했다.&lt;/p&gt;
&lt;p&gt;11시 선릉 미팅에 점심 식사 하고, 4시에 을지로 미팅, 그리고 저녁 7시까지 대전 복귀해서 수업 들어가는 매우 강행군 스케줄;;&lt;/p&gt;
&lt;p&gt;그래도 오랜만에 움직이는 거라 정신 
      
    
    </summary>
    
      <category term="Diary" scheme="https://jeongwookie.github.io/newblogtest/categories/Diary/"/>
    
    
      <category term="Daily life" scheme="https://jeongwookie.github.io/newblogtest/tags/Daily-life/"/>
    
  </entry>
  
</feed>
